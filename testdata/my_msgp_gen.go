// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package testdata

import (
	"fmt"

	"github.com/glycerine/greenpack/msgp"
)

// MSGPfieldsNotEmpty supports omitempty tags
func (z *A) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 6
	}
	var fieldsInUse uint32 = 6
	isempty[0] = (len(z.Name) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Bday.IsZero()) // time.Time, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Phone) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.Sibs == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.GPA == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (!z.Friend) // bool, omitempty
	if isempty[5] {
		fieldsInUse--
	}

	return fieldsInUse
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *A) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())

	// honor the omitempty tags
	var empty [6]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "name_zid00_str"
		o = append(o, 0xae, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Name)
	}

	if !empty[1] {
		// string "Bday_zid01_tim"
		o = append(o, 0xae, 0x42, 0x64, 0x61, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.Bday)
	}

	if !empty[2] {
		// string "phone_zid02_str"
		o = append(o, 0xaf, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Phone)
	}

	if !empty[3] {
		// string "Sibs_zid03_int"
		o = append(o, 0xae, 0x53, 0x69, 0x62, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Sibs)
	}

	if !empty[4] {
		// string "GPA_zid04_f64"
		o = append(o, 0xad, 0x47, 0x50, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x66, 0x36, 0x34)
		o = msgp.AppendFloat64(o, z.GPA)
	}

	if !empty[5] {
		// string "Friend_zid05_boo"
		o = append(o, 0xb0, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.Friend)
	}

	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *A) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *A) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields0zgensym_58b5c2649cecee38_1 = 6

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields0zgensym_58b5c2649cecee38_1 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields0zgensym_58b5c2649cecee38_1, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft0zgensym_58b5c2649cecee38_1 := totalEncodedFields0zgensym_58b5c2649cecee38_1
	missingFieldsLeft0zgensym_58b5c2649cecee38_1 := maxFields0zgensym_58b5c2649cecee38_1 - totalEncodedFields0zgensym_58b5c2649cecee38_1

	var nextMiss0zgensym_58b5c2649cecee38_1 int32 = -1
	var found0zgensym_58b5c2649cecee38_1 [maxFields0zgensym_58b5c2649cecee38_1]bool
	var curField0zgensym_58b5c2649cecee38_1 string

doneWithStruct0zgensym_58b5c2649cecee38_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_58b5c2649cecee38_1 > 0 || missingFieldsLeft0zgensym_58b5c2649cecee38_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_58b5c2649cecee38_1, missingFieldsLeft0zgensym_58b5c2649cecee38_1, msgp.ShowFound(found0zgensym_58b5c2649cecee38_1[:]), unmarshalMsgFieldOrder0zgensym_58b5c2649cecee38_1)
		if encodedFieldsLeft0zgensym_58b5c2649cecee38_1 > 0 {
			encodedFieldsLeft0zgensym_58b5c2649cecee38_1--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField0zgensym_58b5c2649cecee38_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_58b5c2649cecee38_1 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss0zgensym_58b5c2649cecee38_1 = 0
			}
			for nextMiss0zgensym_58b5c2649cecee38_1 < maxFields0zgensym_58b5c2649cecee38_1 && (found0zgensym_58b5c2649cecee38_1[nextMiss0zgensym_58b5c2649cecee38_1] || unmarshalMsgFieldSkip0zgensym_58b5c2649cecee38_1[nextMiss0zgensym_58b5c2649cecee38_1]) {
				nextMiss0zgensym_58b5c2649cecee38_1++
			}
			if nextMiss0zgensym_58b5c2649cecee38_1 == maxFields0zgensym_58b5c2649cecee38_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_58b5c2649cecee38_1
			}
			missingFieldsLeft0zgensym_58b5c2649cecee38_1--
			curField0zgensym_58b5c2649cecee38_1 = unmarshalMsgFieldOrder0zgensym_58b5c2649cecee38_1[nextMiss0zgensym_58b5c2649cecee38_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_58b5c2649cecee38_1)
		switch curField0zgensym_58b5c2649cecee38_1 {
		// -- templateUnmarshalMsg ends here --

		case "name_zid00_str":
			found0zgensym_58b5c2649cecee38_1[0] = true
			z.Name, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Bday_zid01_tim":
			found0zgensym_58b5c2649cecee38_1[1] = true
			z.Bday, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "phone_zid02_str":
			found0zgensym_58b5c2649cecee38_1[2] = true
			z.Phone, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Sibs_zid03_int":
			found0zgensym_58b5c2649cecee38_1[3] = true
			z.Sibs, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "GPA_zid04_f64":
			found0zgensym_58b5c2649cecee38_1[4] = true
			z.GPA, bts, err = nbs.ReadFloat64Bytes(bts)

			if err != nil {
				return
			}
		case "Friend_zid05_boo":
			found0zgensym_58b5c2649cecee38_1[5] = true
			z.Friend, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_58b5c2649cecee38_1 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of A
var unmarshalMsgFieldOrder0zgensym_58b5c2649cecee38_1 = []string{"name_zid00_str", "Bday_zid01_tim", "phone_zid02_str", "Sibs_zid03_int", "GPA_zid04_f64", "Friend_zid05_boo"}

var unmarshalMsgFieldSkip0zgensym_58b5c2649cecee38_1 = []bool{false, false, false, false, false, false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *A) MSGPMsgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.Name) + 15 + msgp.TimeSize + 16 + msgp.StringPrefixSize + len(z.Phone) + 15 + msgp.IntSize + 14 + msgp.Float64Size + 17 + msgp.BoolSize
	return
}
func (z *A) MSGPGstring() (r string) {

	r = "&A{\n"
	r += fmt.Sprintf("  Name: \"%v\",\n", z.Name)
	r += fmt.Sprintf("  Bday: %v,\n", z.Bday)
	r += fmt.Sprintf(" Phone: \"%v\",\n", z.Phone)
	r += fmt.Sprintf("  Sibs: %v,\n", z.Sibs)
	r += fmt.Sprintf("   GPA: %v,\n", z.GPA)
	r += fmt.Sprintf("Friend: %v,\n", z.Friend)
	r += "}\n"
	return
}

// MSGPfieldsNotEmpty supports omitempty tags
func (z *Big) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (len(z.Slice) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Transform) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Myptr == nil) // pointer, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Myarray) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.MySlice) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *Big) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Slice_zid00_slc"
		o = append(o, 0xaf, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Slice)))
		for zgensym_58b5c2649cecee38_2 := range z.Slice {
			o, err = z.Slice[zgensym_58b5c2649cecee38_2].MSGPMarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[1] {
		// string "Transform_zid01_map"
		o = append(o, 0xb3, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.Transform)))
		for zgensym_58b5c2649cecee38_3, zgensym_58b5c2649cecee38_4 := range z.Transform {
			o = msgp.AppendInt(o, zgensym_58b5c2649cecee38_3)
			// marshalGen.gPtr()

			if zgensym_58b5c2649cecee38_4 == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = zgensym_58b5c2649cecee38_4.MSGPMarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[2] {
		// string "Myptr_zid02_ptr"
		o = append(o, 0xaf, 0x4d, 0x79, 0x70, 0x74, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Myptr == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Myptr.MSGPMarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[3] {
		// string "Myarray_zid03_ary"
		o = append(o, 0xb1, 0x4d, 0x79, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x61, 0x72, 0x79)
		o = msgp.AppendArrayHeader(o, 3)
		for zgensym_58b5c2649cecee38_5 := range z.Myarray {
			o = msgp.AppendString(o, z.Myarray[zgensym_58b5c2649cecee38_5])
		}
	}

	if !empty[4] {
		// string "MySlice_zid04_slc"
		o = append(o, 0xb1, 0x4d, 0x79, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.MySlice)))
		for zgensym_58b5c2649cecee38_6 := range z.MySlice {
			o = msgp.AppendString(o, z.MySlice[zgensym_58b5c2649cecee38_6])
		}
	}

	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *Big) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *Big) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields7zgensym_58b5c2649cecee38_8 = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields7zgensym_58b5c2649cecee38_8 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields7zgensym_58b5c2649cecee38_8, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft7zgensym_58b5c2649cecee38_8 := totalEncodedFields7zgensym_58b5c2649cecee38_8
	missingFieldsLeft7zgensym_58b5c2649cecee38_8 := maxFields7zgensym_58b5c2649cecee38_8 - totalEncodedFields7zgensym_58b5c2649cecee38_8

	var nextMiss7zgensym_58b5c2649cecee38_8 int32 = -1
	var found7zgensym_58b5c2649cecee38_8 [maxFields7zgensym_58b5c2649cecee38_8]bool
	var curField7zgensym_58b5c2649cecee38_8 string

doneWithStruct7zgensym_58b5c2649cecee38_8:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft7zgensym_58b5c2649cecee38_8 > 0 || missingFieldsLeft7zgensym_58b5c2649cecee38_8 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft7zgensym_58b5c2649cecee38_8, missingFieldsLeft7zgensym_58b5c2649cecee38_8, msgp.ShowFound(found7zgensym_58b5c2649cecee38_8[:]), unmarshalMsgFieldOrder7zgensym_58b5c2649cecee38_8)
		if encodedFieldsLeft7zgensym_58b5c2649cecee38_8 > 0 {
			encodedFieldsLeft7zgensym_58b5c2649cecee38_8--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField7zgensym_58b5c2649cecee38_8 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss7zgensym_58b5c2649cecee38_8 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss7zgensym_58b5c2649cecee38_8 = 0
			}
			for nextMiss7zgensym_58b5c2649cecee38_8 < maxFields7zgensym_58b5c2649cecee38_8 && (found7zgensym_58b5c2649cecee38_8[nextMiss7zgensym_58b5c2649cecee38_8] || unmarshalMsgFieldSkip7zgensym_58b5c2649cecee38_8[nextMiss7zgensym_58b5c2649cecee38_8]) {
				nextMiss7zgensym_58b5c2649cecee38_8++
			}
			if nextMiss7zgensym_58b5c2649cecee38_8 == maxFields7zgensym_58b5c2649cecee38_8 {
				// filled all the empty fields!
				break doneWithStruct7zgensym_58b5c2649cecee38_8
			}
			missingFieldsLeft7zgensym_58b5c2649cecee38_8--
			curField7zgensym_58b5c2649cecee38_8 = unmarshalMsgFieldOrder7zgensym_58b5c2649cecee38_8[nextMiss7zgensym_58b5c2649cecee38_8]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField7zgensym_58b5c2649cecee38_8)
		switch curField7zgensym_58b5c2649cecee38_8 {
		// -- templateUnmarshalMsg ends here --

		case "Slice_zid00_slc":
			found7zgensym_58b5c2649cecee38_8[0] = true
			if nbs.AlwaysNil {
				(z.Slice) = (z.Slice)[:0]
			} else {

				var zgensym_58b5c2649cecee38_9 uint32
				zgensym_58b5c2649cecee38_9, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Slice) >= int(zgensym_58b5c2649cecee38_9) {
					z.Slice = (z.Slice)[:zgensym_58b5c2649cecee38_9]
				} else {
					z.Slice = make([]S2, zgensym_58b5c2649cecee38_9)
				}
				for zgensym_58b5c2649cecee38_2 := range z.Slice {
					bts, err = z.Slice[zgensym_58b5c2649cecee38_2].MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Transform_zid01_map":
			found7zgensym_58b5c2649cecee38_8[1] = true
			if nbs.AlwaysNil {
				if len(z.Transform) > 0 {
					for key, _ := range z.Transform {
						delete(z.Transform, key)
					}
				}

			} else {

				var zgensym_58b5c2649cecee38_10 uint32
				zgensym_58b5c2649cecee38_10, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Transform == nil && zgensym_58b5c2649cecee38_10 > 0 {
					z.Transform = make(map[int]*S2, zgensym_58b5c2649cecee38_10)
				} else if len(z.Transform) > 0 {
					for key, _ := range z.Transform {
						delete(z.Transform, key)
					}
				}
				for zgensym_58b5c2649cecee38_10 > 0 {
					var zgensym_58b5c2649cecee38_3 int
					var zgensym_58b5c2649cecee38_4 *S2
					zgensym_58b5c2649cecee38_10--
					zgensym_58b5c2649cecee38_3, bts, err = nbs.ReadIntBytes(bts)
					if err != nil {
						return
					}
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if zgensym_58b5c2649cecee38_4 != nil {
							zgensym_58b5c2649cecee38_4.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != zgensym_58b5c2649cecee38_4 {
								zgensym_58b5c2649cecee38_4.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if zgensym_58b5c2649cecee38_4 == nil {
								zgensym_58b5c2649cecee38_4 = new(S2)
							}

							bts, err = zgensym_58b5c2649cecee38_4.MSGPUnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
					z.Transform[zgensym_58b5c2649cecee38_3] = zgensym_58b5c2649cecee38_4
				}
			}
		case "Myptr_zid02_ptr":
			found7zgensym_58b5c2649cecee38_8[2] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Myptr != nil {
					z.Myptr.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Myptr {
						z.Myptr.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Myptr == nil {
						z.Myptr = new(S2)
					}

					bts, err = z.Myptr.MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Myarray_zid03_ary":
			found7zgensym_58b5c2649cecee38_8[3] = true
			var zgensym_58b5c2649cecee38_11 uint32
			zgensym_58b5c2649cecee38_11, bts, err = nbs.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if !nbs.IsNil(bts) && zgensym_58b5c2649cecee38_11 != 3 {
				err = msgp.ArrayError{Wanted: 3, Got: zgensym_58b5c2649cecee38_11}
				return
			}
			for zgensym_58b5c2649cecee38_5 := range z.Myarray {
				z.Myarray[zgensym_58b5c2649cecee38_5], bts, err = nbs.ReadStringBytes(bts)

				if err != nil {
					return
				}
			}
		case "MySlice_zid04_slc":
			found7zgensym_58b5c2649cecee38_8[4] = true
			if nbs.AlwaysNil {
				(z.MySlice) = (z.MySlice)[:0]
			} else {

				var zgensym_58b5c2649cecee38_12 uint32
				zgensym_58b5c2649cecee38_12, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.MySlice) >= int(zgensym_58b5c2649cecee38_12) {
					z.MySlice = (z.MySlice)[:zgensym_58b5c2649cecee38_12]
				} else {
					z.MySlice = make([]string, zgensym_58b5c2649cecee38_12)
				}
				for zgensym_58b5c2649cecee38_6 := range z.MySlice {
					z.MySlice[zgensym_58b5c2649cecee38_6], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss7zgensym_58b5c2649cecee38_8 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Big
var unmarshalMsgFieldOrder7zgensym_58b5c2649cecee38_8 = []string{"Slice_zid00_slc", "Transform_zid01_map", "Myptr_zid02_ptr", "Myarray_zid03_ary", "MySlice_zid04_slc"}

var unmarshalMsgFieldSkip7zgensym_58b5c2649cecee38_8 = []bool{false, false, false, false, false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Big) MSGPMsgsize() (s int) {
	s = 1 + 16 + msgp.ArrayHeaderSize
	for zgensym_58b5c2649cecee38_2 := range z.Slice {
		s += z.Slice[zgensym_58b5c2649cecee38_2].MSGPMsgsize()
	}
	s += 20 + msgp.MapHeaderSize
	if z.Transform != nil {
		for zgensym_58b5c2649cecee38_3, zgensym_58b5c2649cecee38_4 := range z.Transform {
			_ = zgensym_58b5c2649cecee38_4
			_ = zgensym_58b5c2649cecee38_3
			s += msgp.IntSize
			if zgensym_58b5c2649cecee38_4 == nil {
				s += msgp.NilSize
			} else {
				s += zgensym_58b5c2649cecee38_4.MSGPMsgsize()
			}
		}
	}
	s += 16
	if z.Myptr == nil {
		s += msgp.NilSize
	} else {
		s += z.Myptr.MSGPMsgsize()
	}
	s += 18 + msgp.ArrayHeaderSize
	for zgensym_58b5c2649cecee38_5 := range z.Myarray {
		s += msgp.StringPrefixSize + len(z.Myarray[zgensym_58b5c2649cecee38_5])
	}
	s += 18 + msgp.ArrayHeaderSize
	for zgensym_58b5c2649cecee38_6 := range z.MySlice {
		s += msgp.StringPrefixSize + len(z.MySlice[zgensym_58b5c2649cecee38_6])
	}
	return
}
func (z *Big) MSGPGstring() (r string) {

	r = "&Big{\n"
	r += fmt.Sprintf("    Slice: %v,\n", z.Slice)
	r += fmt.Sprintf("Transform: %v,\n", z.Transform)
	r += fmt.Sprintf("    Myptr: %v,\n", z.Myptr)
	r += fmt.Sprintf("  Myarray: %v,\n", z.Myarray)
	r += fmt.Sprintf("  MySlice: %v,\n", z.MySlice)
	r += "}\n"
	return
}

// MSGPfieldsNotEmpty supports omitempty tags
func (z *S) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (z.Placeholder == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *S) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Placeholder__int"
		o = append(o, 0xb0, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Placeholder)
	}

	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *S) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *S) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields13zgensym_58b5c2649cecee38_14 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields13zgensym_58b5c2649cecee38_14 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields13zgensym_58b5c2649cecee38_14, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft13zgensym_58b5c2649cecee38_14 := totalEncodedFields13zgensym_58b5c2649cecee38_14
	missingFieldsLeft13zgensym_58b5c2649cecee38_14 := maxFields13zgensym_58b5c2649cecee38_14 - totalEncodedFields13zgensym_58b5c2649cecee38_14

	var nextMiss13zgensym_58b5c2649cecee38_14 int32 = -1
	var found13zgensym_58b5c2649cecee38_14 [maxFields13zgensym_58b5c2649cecee38_14]bool
	var curField13zgensym_58b5c2649cecee38_14 string

doneWithStruct13zgensym_58b5c2649cecee38_14:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft13zgensym_58b5c2649cecee38_14 > 0 || missingFieldsLeft13zgensym_58b5c2649cecee38_14 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft13zgensym_58b5c2649cecee38_14, missingFieldsLeft13zgensym_58b5c2649cecee38_14, msgp.ShowFound(found13zgensym_58b5c2649cecee38_14[:]), unmarshalMsgFieldOrder13zgensym_58b5c2649cecee38_14)
		if encodedFieldsLeft13zgensym_58b5c2649cecee38_14 > 0 {
			encodedFieldsLeft13zgensym_58b5c2649cecee38_14--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField13zgensym_58b5c2649cecee38_14 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss13zgensym_58b5c2649cecee38_14 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss13zgensym_58b5c2649cecee38_14 = 0
			}
			for nextMiss13zgensym_58b5c2649cecee38_14 < maxFields13zgensym_58b5c2649cecee38_14 && (found13zgensym_58b5c2649cecee38_14[nextMiss13zgensym_58b5c2649cecee38_14] || unmarshalMsgFieldSkip13zgensym_58b5c2649cecee38_14[nextMiss13zgensym_58b5c2649cecee38_14]) {
				nextMiss13zgensym_58b5c2649cecee38_14++
			}
			if nextMiss13zgensym_58b5c2649cecee38_14 == maxFields13zgensym_58b5c2649cecee38_14 {
				// filled all the empty fields!
				break doneWithStruct13zgensym_58b5c2649cecee38_14
			}
			missingFieldsLeft13zgensym_58b5c2649cecee38_14--
			curField13zgensym_58b5c2649cecee38_14 = unmarshalMsgFieldOrder13zgensym_58b5c2649cecee38_14[nextMiss13zgensym_58b5c2649cecee38_14]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField13zgensym_58b5c2649cecee38_14)
		switch curField13zgensym_58b5c2649cecee38_14 {
		// -- templateUnmarshalMsg ends here --

		case "Placeholder__int":
			found13zgensym_58b5c2649cecee38_14[0] = true
			z.Placeholder, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss13zgensym_58b5c2649cecee38_14 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of S
var unmarshalMsgFieldOrder13zgensym_58b5c2649cecee38_14 = []string{"Placeholder__int"}

var unmarshalMsgFieldSkip13zgensym_58b5c2649cecee38_14 = []bool{false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *S) MSGPMsgsize() (s int) {
	s = 1 + 17 + msgp.IntSize
	return
}
func (z *S) MSGPGstring() (r string) {

	r = "&S{\n"
	r += fmt.Sprintf("Placeholder: %v,\n", z.Placeholder)
	r += "}\n"
	return
}

// MSGPfieldsNotEmpty supports omitempty tags
func (z *S2) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 7
	}
	var fieldsInUse uint32 = 7
	isempty[1] = (len(z.B) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.R) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.P == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.Q == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.T == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.Arr) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (z.MyTree == nil) // pointer, omitempty
	if isempty[7] {
		fieldsInUse--
	}

	return fieldsInUse
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *S2) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())

	// honor the omitempty tags
	var empty [8]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[1] {
		// string "beta_zid01_str"
		o = append(o, 0xae, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.B)
	}

	if !empty[2] {
		// string "ralph_zid02_map"
		o = append(o, 0xaf, 0x72, 0x61, 0x6c, 0x70, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.R)))
		for zgensym_58b5c2649cecee38_15, zgensym_58b5c2649cecee38_16 := range z.R {
			o = msgp.AppendString(o, zgensym_58b5c2649cecee38_15)
			o = msgp.AppendUint8(o, zgensym_58b5c2649cecee38_16)
		}
	}

	if !empty[3] {
		// string "P_zid03_u16"
		o = append(o, 0xab, 0x50, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x75, 0x31, 0x36)
		o = msgp.AppendUint16(o, z.P)
	}

	if !empty[4] {
		// string "Q_zid04_u32"
		o = append(o, 0xab, 0x51, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x33, 0x32)
		o = msgp.AppendUint32(o, z.Q)
	}

	if !empty[5] {
		// string "T_zid05_i64"
		o = append(o, 0xab, 0x54, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.T)
	}

	if !empty[6] {
		// string "arr_zid06_ary"
		o = append(o, 0xad, 0x61, 0x72, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x61, 0x72, 0x79)
		o = msgp.AppendArrayHeader(o, 6)
		for zgensym_58b5c2649cecee38_17 := range z.Arr {
			o = msgp.AppendFloat64(o, z.Arr[zgensym_58b5c2649cecee38_17])
		}
	}

	if !empty[7] {
		// string "MyTree_zid07_ptr"
		o = append(o, 0xb0, 0x4d, 0x79, 0x54, 0x72, 0x65, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.MyTree == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.MyTree.MSGPMarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *S2) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *S2) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields18zgensym_58b5c2649cecee38_19 = 8

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields18zgensym_58b5c2649cecee38_19 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields18zgensym_58b5c2649cecee38_19, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft18zgensym_58b5c2649cecee38_19 := totalEncodedFields18zgensym_58b5c2649cecee38_19
	missingFieldsLeft18zgensym_58b5c2649cecee38_19 := maxFields18zgensym_58b5c2649cecee38_19 - totalEncodedFields18zgensym_58b5c2649cecee38_19

	var nextMiss18zgensym_58b5c2649cecee38_19 int32 = -1
	var found18zgensym_58b5c2649cecee38_19 [maxFields18zgensym_58b5c2649cecee38_19]bool
	var curField18zgensym_58b5c2649cecee38_19 string

doneWithStruct18zgensym_58b5c2649cecee38_19:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft18zgensym_58b5c2649cecee38_19 > 0 || missingFieldsLeft18zgensym_58b5c2649cecee38_19 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft18zgensym_58b5c2649cecee38_19, missingFieldsLeft18zgensym_58b5c2649cecee38_19, msgp.ShowFound(found18zgensym_58b5c2649cecee38_19[:]), unmarshalMsgFieldOrder18zgensym_58b5c2649cecee38_19)
		if encodedFieldsLeft18zgensym_58b5c2649cecee38_19 > 0 {
			encodedFieldsLeft18zgensym_58b5c2649cecee38_19--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField18zgensym_58b5c2649cecee38_19 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss18zgensym_58b5c2649cecee38_19 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss18zgensym_58b5c2649cecee38_19 = 0
			}
			for nextMiss18zgensym_58b5c2649cecee38_19 < maxFields18zgensym_58b5c2649cecee38_19 && (found18zgensym_58b5c2649cecee38_19[nextMiss18zgensym_58b5c2649cecee38_19] || unmarshalMsgFieldSkip18zgensym_58b5c2649cecee38_19[nextMiss18zgensym_58b5c2649cecee38_19]) {
				nextMiss18zgensym_58b5c2649cecee38_19++
			}
			if nextMiss18zgensym_58b5c2649cecee38_19 == maxFields18zgensym_58b5c2649cecee38_19 {
				// filled all the empty fields!
				break doneWithStruct18zgensym_58b5c2649cecee38_19
			}
			missingFieldsLeft18zgensym_58b5c2649cecee38_19--
			curField18zgensym_58b5c2649cecee38_19 = unmarshalMsgFieldOrder18zgensym_58b5c2649cecee38_19[nextMiss18zgensym_58b5c2649cecee38_19]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField18zgensym_58b5c2649cecee38_19)
		switch curField18zgensym_58b5c2649cecee38_19 {
		// -- templateUnmarshalMsg ends here --

		case "beta_zid01_str":
			found18zgensym_58b5c2649cecee38_19[1] = true
			z.B, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ralph_zid02_map":
			found18zgensym_58b5c2649cecee38_19[2] = true
			if nbs.AlwaysNil {
				if len(z.R) > 0 {
					for key, _ := range z.R {
						delete(z.R, key)
					}
				}

			} else {

				var zgensym_58b5c2649cecee38_20 uint32
				zgensym_58b5c2649cecee38_20, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.R == nil && zgensym_58b5c2649cecee38_20 > 0 {
					z.R = make(map[string]uint8, zgensym_58b5c2649cecee38_20)
				} else if len(z.R) > 0 {
					for key, _ := range z.R {
						delete(z.R, key)
					}
				}
				for zgensym_58b5c2649cecee38_20 > 0 {
					var zgensym_58b5c2649cecee38_15 string
					var zgensym_58b5c2649cecee38_16 uint8
					zgensym_58b5c2649cecee38_20--
					zgensym_58b5c2649cecee38_15, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zgensym_58b5c2649cecee38_16, bts, err = nbs.ReadUint8Bytes(bts)

					if err != nil {
						return
					}
					z.R[zgensym_58b5c2649cecee38_15] = zgensym_58b5c2649cecee38_16
				}
			}
		case "P_zid03_u16":
			found18zgensym_58b5c2649cecee38_19[3] = true
			z.P, bts, err = nbs.ReadUint16Bytes(bts)

			if err != nil {
				return
			}
		case "Q_zid04_u32":
			found18zgensym_58b5c2649cecee38_19[4] = true
			z.Q, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		case "T_zid05_i64":
			found18zgensym_58b5c2649cecee38_19[5] = true
			z.T, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "arr_zid06_ary":
			found18zgensym_58b5c2649cecee38_19[6] = true
			var zgensym_58b5c2649cecee38_21 uint32
			zgensym_58b5c2649cecee38_21, bts, err = nbs.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if !nbs.IsNil(bts) && zgensym_58b5c2649cecee38_21 != 6 {
				err = msgp.ArrayError{Wanted: 6, Got: zgensym_58b5c2649cecee38_21}
				return
			}
			for zgensym_58b5c2649cecee38_17 := range z.Arr {
				z.Arr[zgensym_58b5c2649cecee38_17], bts, err = nbs.ReadFloat64Bytes(bts)

				if err != nil {
					return
				}
			}
		case "MyTree_zid07_ptr":
			found18zgensym_58b5c2649cecee38_19[7] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.MyTree != nil {
					z.MyTree.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.MyTree {
						z.MyTree.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.MyTree == nil {
						z.MyTree = new(Tree)
					}

					bts, err = z.MyTree.MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss18zgensym_58b5c2649cecee38_19 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of S2
var unmarshalMsgFieldOrder18zgensym_58b5c2649cecee38_19 = []string{"", "beta_zid01_str", "ralph_zid02_map", "P_zid03_u16", "Q_zid04_u32", "T_zid05_i64", "arr_zid06_ary", "MyTree_zid07_ptr"}

var unmarshalMsgFieldSkip18zgensym_58b5c2649cecee38_19 = []bool{true, false, false, false, false, false, false, false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *S2) MSGPMsgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.B) + 16 + msgp.MapHeaderSize
	if z.R != nil {
		for zgensym_58b5c2649cecee38_15, zgensym_58b5c2649cecee38_16 := range z.R {
			_ = zgensym_58b5c2649cecee38_16
			_ = zgensym_58b5c2649cecee38_15
			s += msgp.StringPrefixSize + len(zgensym_58b5c2649cecee38_15) + msgp.Uint8Size
		}
	}
	s += 12 + msgp.Uint16Size + 12 + msgp.Uint32Size + 12 + msgp.Int64Size + 14 + msgp.ArrayHeaderSize + (6 * (msgp.Float64Size)) + 17
	if z.MyTree == nil {
		s += msgp.NilSize
	} else {
		s += z.MyTree.MSGPMsgsize()
	}
	return
}
func (z *S2) MSGPGstring() (r string) {

	r = "&S2{\n"
	r += fmt.Sprintf("     B: \"%v\",\n", z.B)
	r += fmt.Sprintf("     R: %v,\n", z.R)
	r += fmt.Sprintf("     P: %v,\n", z.P)
	r += fmt.Sprintf("     Q: %v,\n", z.Q)
	r += fmt.Sprintf("     T: %v,\n", z.T)
	r += fmt.Sprintf("   Arr: %v,\n", z.Arr)
	r += fmt.Sprintf("MyTree: %v,\n", z.MyTree)
	r += "}\n"
	return
}

// MSGPfieldsNotEmpty supports omitempty tags
func (z *Sys) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = false
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *Sys) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "F_zid00_ifc"
		o = append(o, 0xab, 0x46, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x66, 0x63)
		o, err = msgp.AppendIntf(o, z.F)
		if err != nil {
			return
		}
	}

	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *Sys) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *Sys) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields22zgensym_58b5c2649cecee38_23 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields22zgensym_58b5c2649cecee38_23 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields22zgensym_58b5c2649cecee38_23, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft22zgensym_58b5c2649cecee38_23 := totalEncodedFields22zgensym_58b5c2649cecee38_23
	missingFieldsLeft22zgensym_58b5c2649cecee38_23 := maxFields22zgensym_58b5c2649cecee38_23 - totalEncodedFields22zgensym_58b5c2649cecee38_23

	var nextMiss22zgensym_58b5c2649cecee38_23 int32 = -1
	var found22zgensym_58b5c2649cecee38_23 [maxFields22zgensym_58b5c2649cecee38_23]bool
	var curField22zgensym_58b5c2649cecee38_23 string

doneWithStruct22zgensym_58b5c2649cecee38_23:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft22zgensym_58b5c2649cecee38_23 > 0 || missingFieldsLeft22zgensym_58b5c2649cecee38_23 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft22zgensym_58b5c2649cecee38_23, missingFieldsLeft22zgensym_58b5c2649cecee38_23, msgp.ShowFound(found22zgensym_58b5c2649cecee38_23[:]), unmarshalMsgFieldOrder22zgensym_58b5c2649cecee38_23)
		if encodedFieldsLeft22zgensym_58b5c2649cecee38_23 > 0 {
			encodedFieldsLeft22zgensym_58b5c2649cecee38_23--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField22zgensym_58b5c2649cecee38_23 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss22zgensym_58b5c2649cecee38_23 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss22zgensym_58b5c2649cecee38_23 = 0
			}
			for nextMiss22zgensym_58b5c2649cecee38_23 < maxFields22zgensym_58b5c2649cecee38_23 && (found22zgensym_58b5c2649cecee38_23[nextMiss22zgensym_58b5c2649cecee38_23] || unmarshalMsgFieldSkip22zgensym_58b5c2649cecee38_23[nextMiss22zgensym_58b5c2649cecee38_23]) {
				nextMiss22zgensym_58b5c2649cecee38_23++
			}
			if nextMiss22zgensym_58b5c2649cecee38_23 == maxFields22zgensym_58b5c2649cecee38_23 {
				// filled all the empty fields!
				break doneWithStruct22zgensym_58b5c2649cecee38_23
			}
			missingFieldsLeft22zgensym_58b5c2649cecee38_23--
			curField22zgensym_58b5c2649cecee38_23 = unmarshalMsgFieldOrder22zgensym_58b5c2649cecee38_23[nextMiss22zgensym_58b5c2649cecee38_23]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField22zgensym_58b5c2649cecee38_23)
		switch curField22zgensym_58b5c2649cecee38_23 {
		// -- templateUnmarshalMsg ends here --

		case "F_zid00_ifc":
			found22zgensym_58b5c2649cecee38_23[0] = true
			z.F, bts, err = nbs.ReadIntfBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss22zgensym_58b5c2649cecee38_23 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Sys
var unmarshalMsgFieldOrder22zgensym_58b5c2649cecee38_23 = []string{"F_zid00_ifc"}

var unmarshalMsgFieldSkip22zgensym_58b5c2649cecee38_23 = []bool{false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Sys) MSGPMsgsize() (s int) {
	s = 1 + 12 + msgp.GuessSize(z.F)
	return
}
func (z *Sys) MSGPGstring() (r string) {

	r = "&Sys{\n"
	r += fmt.Sprintf("F: %v,\n", z.F)
	r += "}\n"
	return
}

// MSGPfieldsNotEmpty supports omitempty tags
func (z *Tree) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (len(z.Chld) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Str) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Par == nil) // pointer, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *Tree) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Chld_zid00_slc"
		o = append(o, 0xae, 0x43, 0x68, 0x6c, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Chld)))
		for zgensym_58b5c2649cecee38_24 := range z.Chld {
			o, err = z.Chld[zgensym_58b5c2649cecee38_24].MSGPMarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[1] {
		// string "Str_zid01_str"
		o = append(o, 0xad, 0x53, 0x74, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Str)
	}

	if !empty[2] {
		// string "Par_zid02_ptr"
		o = append(o, 0xad, 0x50, 0x61, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Par == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Par.MSGPMarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *Tree) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *Tree) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields25zgensym_58b5c2649cecee38_26 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields25zgensym_58b5c2649cecee38_26 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields25zgensym_58b5c2649cecee38_26, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft25zgensym_58b5c2649cecee38_26 := totalEncodedFields25zgensym_58b5c2649cecee38_26
	missingFieldsLeft25zgensym_58b5c2649cecee38_26 := maxFields25zgensym_58b5c2649cecee38_26 - totalEncodedFields25zgensym_58b5c2649cecee38_26

	var nextMiss25zgensym_58b5c2649cecee38_26 int32 = -1
	var found25zgensym_58b5c2649cecee38_26 [maxFields25zgensym_58b5c2649cecee38_26]bool
	var curField25zgensym_58b5c2649cecee38_26 string

doneWithStruct25zgensym_58b5c2649cecee38_26:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft25zgensym_58b5c2649cecee38_26 > 0 || missingFieldsLeft25zgensym_58b5c2649cecee38_26 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft25zgensym_58b5c2649cecee38_26, missingFieldsLeft25zgensym_58b5c2649cecee38_26, msgp.ShowFound(found25zgensym_58b5c2649cecee38_26[:]), unmarshalMsgFieldOrder25zgensym_58b5c2649cecee38_26)
		if encodedFieldsLeft25zgensym_58b5c2649cecee38_26 > 0 {
			encodedFieldsLeft25zgensym_58b5c2649cecee38_26--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField25zgensym_58b5c2649cecee38_26 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss25zgensym_58b5c2649cecee38_26 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss25zgensym_58b5c2649cecee38_26 = 0
			}
			for nextMiss25zgensym_58b5c2649cecee38_26 < maxFields25zgensym_58b5c2649cecee38_26 && (found25zgensym_58b5c2649cecee38_26[nextMiss25zgensym_58b5c2649cecee38_26] || unmarshalMsgFieldSkip25zgensym_58b5c2649cecee38_26[nextMiss25zgensym_58b5c2649cecee38_26]) {
				nextMiss25zgensym_58b5c2649cecee38_26++
			}
			if nextMiss25zgensym_58b5c2649cecee38_26 == maxFields25zgensym_58b5c2649cecee38_26 {
				// filled all the empty fields!
				break doneWithStruct25zgensym_58b5c2649cecee38_26
			}
			missingFieldsLeft25zgensym_58b5c2649cecee38_26--
			curField25zgensym_58b5c2649cecee38_26 = unmarshalMsgFieldOrder25zgensym_58b5c2649cecee38_26[nextMiss25zgensym_58b5c2649cecee38_26]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField25zgensym_58b5c2649cecee38_26)
		switch curField25zgensym_58b5c2649cecee38_26 {
		// -- templateUnmarshalMsg ends here --

		case "Chld_zid00_slc":
			found25zgensym_58b5c2649cecee38_26[0] = true
			if nbs.AlwaysNil {
				(z.Chld) = (z.Chld)[:0]
			} else {

				var zgensym_58b5c2649cecee38_27 uint32
				zgensym_58b5c2649cecee38_27, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Chld) >= int(zgensym_58b5c2649cecee38_27) {
					z.Chld = (z.Chld)[:zgensym_58b5c2649cecee38_27]
				} else {
					z.Chld = make([]Tree, zgensym_58b5c2649cecee38_27)
				}
				for zgensym_58b5c2649cecee38_24 := range z.Chld {
					bts, err = z.Chld[zgensym_58b5c2649cecee38_24].MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Str_zid01_str":
			found25zgensym_58b5c2649cecee38_26[1] = true
			z.Str, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Par_zid02_ptr":
			found25zgensym_58b5c2649cecee38_26[2] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Par != nil {
					z.Par.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Par {
						z.Par.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Par == nil {
						z.Par = new(S2)
					}

					bts, err = z.Par.MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss25zgensym_58b5c2649cecee38_26 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Tree
var unmarshalMsgFieldOrder25zgensym_58b5c2649cecee38_26 = []string{"Chld_zid00_slc", "Str_zid01_str", "Par_zid02_ptr"}

var unmarshalMsgFieldSkip25zgensym_58b5c2649cecee38_26 = []bool{false, false, false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Tree) MSGPMsgsize() (s int) {
	s = 1 + 15 + msgp.ArrayHeaderSize
	for zgensym_58b5c2649cecee38_24 := range z.Chld {
		s += z.Chld[zgensym_58b5c2649cecee38_24].MSGPMsgsize()
	}
	s += 14 + msgp.StringPrefixSize + len(z.Str) + 14
	if z.Par == nil {
		s += msgp.NilSize
	} else {
		s += z.Par.MSGPMsgsize()
	}
	return
}
func (z *Tree) MSGPGstring() (r string) {

	r = "&Tree{\n"
	r += fmt.Sprintf("Chld: %v,\n", z.Chld)
	r += fmt.Sprintf(" Str: \"%v\",\n", z.Str)
	r += fmt.Sprintf(" Par: %v,\n", z.Par)
	r += "}\n"
	return
}
