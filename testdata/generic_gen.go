// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package testdata

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *CompareToIgnoredFields) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_d02da37b485b84ca_1 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_d02da37b485b84ca_1 uint32
	totalEncodedFields0zgensym_d02da37b485b84ca_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_d02da37b485b84ca_1 := totalEncodedFields0zgensym_d02da37b485b84ca_1
	missingFieldsLeft0zgensym_d02da37b485b84ca_1 := maxFields0zgensym_d02da37b485b84ca_1 - totalEncodedFields0zgensym_d02da37b485b84ca_1

	var nextMiss0zgensym_d02da37b485b84ca_1 int32 = -1
	var found0zgensym_d02da37b485b84ca_1 [maxFields0zgensym_d02da37b485b84ca_1]bool
	var curField0zgensym_d02da37b485b84ca_1 string

doneWithStruct0zgensym_d02da37b485b84ca_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_d02da37b485b84ca_1 > 0 || missingFieldsLeft0zgensym_d02da37b485b84ca_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft0zgensym_d02da37b485b84ca_1, missingFieldsLeft0zgensym_d02da37b485b84ca_1, msgp.ShowFound(found0zgensym_d02da37b485b84ca_1[:]), decodeMsgFieldOrder0zgensym_d02da37b485b84ca_1)
		if encodedFieldsLeft0zgensym_d02da37b485b84ca_1 > 0 {
			encodedFieldsLeft0zgensym_d02da37b485b84ca_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_d02da37b485b84ca_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_d02da37b485b84ca_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_d02da37b485b84ca_1 = 0
			}
			for nextMiss0zgensym_d02da37b485b84ca_1 < maxFields0zgensym_d02da37b485b84ca_1 && (found0zgensym_d02da37b485b84ca_1[nextMiss0zgensym_d02da37b485b84ca_1] || decodeMsgFieldSkip0zgensym_d02da37b485b84ca_1[nextMiss0zgensym_d02da37b485b84ca_1]) {
				nextMiss0zgensym_d02da37b485b84ca_1++
			}
			if nextMiss0zgensym_d02da37b485b84ca_1 == maxFields0zgensym_d02da37b485b84ca_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_d02da37b485b84ca_1
			}
			missingFieldsLeft0zgensym_d02da37b485b84ca_1--
			curField0zgensym_d02da37b485b84ca_1 = decodeMsgFieldOrder0zgensym_d02da37b485b84ca_1[nextMiss0zgensym_d02da37b485b84ca_1]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField0zgensym_d02da37b485b84ca_1)
		switch curField0zgensym_d02da37b485b84ca_1 {
		// -- templateDecodeMsg ends here --

		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_d02da37b485b84ca_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of CompareToIgnoredFields
var decodeMsgFieldOrder0zgensym_d02da37b485b84ca_1 = []string{""}

var decodeMsgFieldSkip0zgensym_d02da37b485b84ca_1 = []bool{true}

// fieldsNotEmpty supports omitempty tags
func (z *CompareToIgnoredFields) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 0
	}
	var fieldsInUse uint32 = 0

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *CompareToIgnoredFields) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_d02da37b485b84ca_2 [1]bool
	fieldsInUse_zgensym_d02da37b485b84ca_3 := z.fieldsNotEmpty(empty_zgensym_d02da37b485b84ca_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_d02da37b485b84ca_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'CompareToIgnoredFields'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73})
	if err != nil {
		return err
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CompareToIgnoredFields) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CompareToIgnoredFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *CompareToIgnoredFields) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_d02da37b485b84ca_5 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_d02da37b485b84ca_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_d02da37b485b84ca_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_d02da37b485b84ca_5 := totalEncodedFields4zgensym_d02da37b485b84ca_5
	missingFieldsLeft4zgensym_d02da37b485b84ca_5 := maxFields4zgensym_d02da37b485b84ca_5 - totalEncodedFields4zgensym_d02da37b485b84ca_5

	var nextMiss4zgensym_d02da37b485b84ca_5 int32 = -1
	var found4zgensym_d02da37b485b84ca_5 [maxFields4zgensym_d02da37b485b84ca_5]bool
	var curField4zgensym_d02da37b485b84ca_5 string

doneWithStruct4zgensym_d02da37b485b84ca_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_d02da37b485b84ca_5 > 0 || missingFieldsLeft4zgensym_d02da37b485b84ca_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft4zgensym_d02da37b485b84ca_5, missingFieldsLeft4zgensym_d02da37b485b84ca_5, msgp.ShowFound(found4zgensym_d02da37b485b84ca_5[:]), unmarshalMsgFieldOrder4zgensym_d02da37b485b84ca_5)
		if encodedFieldsLeft4zgensym_d02da37b485b84ca_5 > 0 {
			encodedFieldsLeft4zgensym_d02da37b485b84ca_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_d02da37b485b84ca_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_d02da37b485b84ca_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_d02da37b485b84ca_5 = 0
			}
			for nextMiss4zgensym_d02da37b485b84ca_5 < maxFields4zgensym_d02da37b485b84ca_5 && (found4zgensym_d02da37b485b84ca_5[nextMiss4zgensym_d02da37b485b84ca_5] || unmarshalMsgFieldSkip4zgensym_d02da37b485b84ca_5[nextMiss4zgensym_d02da37b485b84ca_5]) {
				nextMiss4zgensym_d02da37b485b84ca_5++
			}
			if nextMiss4zgensym_d02da37b485b84ca_5 == maxFields4zgensym_d02da37b485b84ca_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_d02da37b485b84ca_5
			}
			missingFieldsLeft4zgensym_d02da37b485b84ca_5--
			curField4zgensym_d02da37b485b84ca_5 = unmarshalMsgFieldOrder4zgensym_d02da37b485b84ca_5[nextMiss4zgensym_d02da37b485b84ca_5]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField4zgensym_d02da37b485b84ca_5)
		switch curField4zgensym_d02da37b485b84ca_5 {
		// -- templateUnmarshalMsg ends here --

		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_d02da37b485b84ca_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of CompareToIgnoredFields
var unmarshalMsgFieldOrder4zgensym_d02da37b485b84ca_5 = []string{""}

var unmarshalMsgFieldSkip4zgensym_d02da37b485b84ca_5 = []bool{true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CompareToIgnoredFields) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Matrix[T]) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_d02da37b485b84ca_7 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_d02da37b485b84ca_7 uint32
	totalEncodedFields6zgensym_d02da37b485b84ca_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_d02da37b485b84ca_7 := totalEncodedFields6zgensym_d02da37b485b84ca_7
	missingFieldsLeft6zgensym_d02da37b485b84ca_7 := maxFields6zgensym_d02da37b485b84ca_7 - totalEncodedFields6zgensym_d02da37b485b84ca_7

	var nextMiss6zgensym_d02da37b485b84ca_7 int32 = -1
	var found6zgensym_d02da37b485b84ca_7 [maxFields6zgensym_d02da37b485b84ca_7]bool
	var curField6zgensym_d02da37b485b84ca_7 string

doneWithStruct6zgensym_d02da37b485b84ca_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_d02da37b485b84ca_7 > 0 || missingFieldsLeft6zgensym_d02da37b485b84ca_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft6zgensym_d02da37b485b84ca_7, missingFieldsLeft6zgensym_d02da37b485b84ca_7, msgp.ShowFound(found6zgensym_d02da37b485b84ca_7[:]), decodeMsgFieldOrder6zgensym_d02da37b485b84ca_7)
		if encodedFieldsLeft6zgensym_d02da37b485b84ca_7 > 0 {
			encodedFieldsLeft6zgensym_d02da37b485b84ca_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_d02da37b485b84ca_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_d02da37b485b84ca_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_d02da37b485b84ca_7 = 0
			}
			for nextMiss6zgensym_d02da37b485b84ca_7 < maxFields6zgensym_d02da37b485b84ca_7 && (found6zgensym_d02da37b485b84ca_7[nextMiss6zgensym_d02da37b485b84ca_7] || decodeMsgFieldSkip6zgensym_d02da37b485b84ca_7[nextMiss6zgensym_d02da37b485b84ca_7]) {
				nextMiss6zgensym_d02da37b485b84ca_7++
			}
			if nextMiss6zgensym_d02da37b485b84ca_7 == maxFields6zgensym_d02da37b485b84ca_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_d02da37b485b84ca_7
			}
			missingFieldsLeft6zgensym_d02da37b485b84ca_7--
			curField6zgensym_d02da37b485b84ca_7 = decodeMsgFieldOrder6zgensym_d02da37b485b84ca_7[nextMiss6zgensym_d02da37b485b84ca_7]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField6zgensym_d02da37b485b84ca_7)
		switch curField6zgensym_d02da37b485b84ca_7 {
		// -- templateDecodeMsg ends here --

		case "Nrow__int":
			found6zgensym_d02da37b485b84ca_7[1] = true
			z.Nrow, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "Ncol__int":
			found6zgensym_d02da37b485b84ca_7[2] = true
			z.Ncol, err = dc.ReadInt()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_d02da37b485b84ca_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Matrix
var decodeMsgFieldOrder6zgensym_d02da37b485b84ca_7 = []string{"", "Nrow__int", "Ncol__int"}

var decodeMsgFieldSkip6zgensym_d02da37b485b84ca_7 = []bool{true, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Matrix[T]) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[1] = (z.Nrow == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Ncol == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Matrix[T]) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_d02da37b485b84ca_8 [3]bool
	fieldsInUse_zgensym_d02da37b485b84ca_9 := z.fieldsNotEmpty(empty_zgensym_d02da37b485b84ca_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_d02da37b485b84ca_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Matrix'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4d, 0x61, 0x74, 0x72, 0x69, 0x78})
	if err != nil {
		return err
	}

	if !empty_zgensym_d02da37b485b84ca_8[1] {
		// write "Nrow__int"
		err = en.Append(0xa9, 0x4e, 0x72, 0x6f, 0x77, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Nrow)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_d02da37b485b84ca_8[2] {
		// write "Ncol__int"
		err = en.Append(0xa9, 0x4e, 0x63, 0x6f, 0x6c, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Ncol)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Matrix[T]) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[1] {
		// string "Nrow__int"
		o = append(o, 0xa9, 0x4e, 0x72, 0x6f, 0x77, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Nrow)
	}

	if !empty[2] {
		// string "Ncol__int"
		o = append(o, 0xa9, 0x4e, 0x63, 0x6f, 0x6c, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Ncol)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Matrix[T]) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Matrix[T]) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields10zgensym_d02da37b485b84ca_11 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields10zgensym_d02da37b485b84ca_11 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields10zgensym_d02da37b485b84ca_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft10zgensym_d02da37b485b84ca_11 := totalEncodedFields10zgensym_d02da37b485b84ca_11
	missingFieldsLeft10zgensym_d02da37b485b84ca_11 := maxFields10zgensym_d02da37b485b84ca_11 - totalEncodedFields10zgensym_d02da37b485b84ca_11

	var nextMiss10zgensym_d02da37b485b84ca_11 int32 = -1
	var found10zgensym_d02da37b485b84ca_11 [maxFields10zgensym_d02da37b485b84ca_11]bool
	var curField10zgensym_d02da37b485b84ca_11 string

doneWithStruct10zgensym_d02da37b485b84ca_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_d02da37b485b84ca_11 > 0 || missingFieldsLeft10zgensym_d02da37b485b84ca_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft10zgensym_d02da37b485b84ca_11, missingFieldsLeft10zgensym_d02da37b485b84ca_11, msgp.ShowFound(found10zgensym_d02da37b485b84ca_11[:]), unmarshalMsgFieldOrder10zgensym_d02da37b485b84ca_11)
		if encodedFieldsLeft10zgensym_d02da37b485b84ca_11 > 0 {
			encodedFieldsLeft10zgensym_d02da37b485b84ca_11--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField10zgensym_d02da37b485b84ca_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_d02da37b485b84ca_11 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss10zgensym_d02da37b485b84ca_11 = 0
			}
			for nextMiss10zgensym_d02da37b485b84ca_11 < maxFields10zgensym_d02da37b485b84ca_11 && (found10zgensym_d02da37b485b84ca_11[nextMiss10zgensym_d02da37b485b84ca_11] || unmarshalMsgFieldSkip10zgensym_d02da37b485b84ca_11[nextMiss10zgensym_d02da37b485b84ca_11]) {
				nextMiss10zgensym_d02da37b485b84ca_11++
			}
			if nextMiss10zgensym_d02da37b485b84ca_11 == maxFields10zgensym_d02da37b485b84ca_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_d02da37b485b84ca_11
			}
			missingFieldsLeft10zgensym_d02da37b485b84ca_11--
			curField10zgensym_d02da37b485b84ca_11 = unmarshalMsgFieldOrder10zgensym_d02da37b485b84ca_11[nextMiss10zgensym_d02da37b485b84ca_11]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField10zgensym_d02da37b485b84ca_11)
		switch curField10zgensym_d02da37b485b84ca_11 {
		// -- templateUnmarshalMsg ends here --

		case "Nrow__int":
			found10zgensym_d02da37b485b84ca_11[1] = true
			z.Nrow, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "Ncol__int":
			found10zgensym_d02da37b485b84ca_11[2] = true
			z.Ncol, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_d02da37b485b84ca_11 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Matrix
var unmarshalMsgFieldOrder10zgensym_d02da37b485b84ca_11 = []string{"", "Nrow__int", "Ncol__int"}

var unmarshalMsgFieldSkip10zgensym_d02da37b485b84ca_11 = []bool{true, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Matrix[T]) Msgsize() (s int) {
	s = 1 + 10 + msgp.IntSize + 10 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *StructThatHasFieldsWithGenerics) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields12zgensym_d02da37b485b84ca_13 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields12zgensym_d02da37b485b84ca_13 uint32
	totalEncodedFields12zgensym_d02da37b485b84ca_13, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft12zgensym_d02da37b485b84ca_13 := totalEncodedFields12zgensym_d02da37b485b84ca_13
	missingFieldsLeft12zgensym_d02da37b485b84ca_13 := maxFields12zgensym_d02da37b485b84ca_13 - totalEncodedFields12zgensym_d02da37b485b84ca_13

	var nextMiss12zgensym_d02da37b485b84ca_13 int32 = -1
	var found12zgensym_d02da37b485b84ca_13 [maxFields12zgensym_d02da37b485b84ca_13]bool
	var curField12zgensym_d02da37b485b84ca_13 string

doneWithStruct12zgensym_d02da37b485b84ca_13:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft12zgensym_d02da37b485b84ca_13 > 0 || missingFieldsLeft12zgensym_d02da37b485b84ca_13 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft12zgensym_d02da37b485b84ca_13, missingFieldsLeft12zgensym_d02da37b485b84ca_13, msgp.ShowFound(found12zgensym_d02da37b485b84ca_13[:]), decodeMsgFieldOrder12zgensym_d02da37b485b84ca_13)
		if encodedFieldsLeft12zgensym_d02da37b485b84ca_13 > 0 {
			encodedFieldsLeft12zgensym_d02da37b485b84ca_13--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField12zgensym_d02da37b485b84ca_13 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss12zgensym_d02da37b485b84ca_13 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss12zgensym_d02da37b485b84ca_13 = 0
			}
			for nextMiss12zgensym_d02da37b485b84ca_13 < maxFields12zgensym_d02da37b485b84ca_13 && (found12zgensym_d02da37b485b84ca_13[nextMiss12zgensym_d02da37b485b84ca_13] || decodeMsgFieldSkip12zgensym_d02da37b485b84ca_13[nextMiss12zgensym_d02da37b485b84ca_13]) {
				nextMiss12zgensym_d02da37b485b84ca_13++
			}
			if nextMiss12zgensym_d02da37b485b84ca_13 == maxFields12zgensym_d02da37b485b84ca_13 {
				// filled all the empty fields!
				break doneWithStruct12zgensym_d02da37b485b84ca_13
			}
			missingFieldsLeft12zgensym_d02da37b485b84ca_13--
			curField12zgensym_d02da37b485b84ca_13 = decodeMsgFieldOrder12zgensym_d02da37b485b84ca_13[nextMiss12zgensym_d02da37b485b84ca_13]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField12zgensym_d02da37b485b84ca_13)
		switch curField12zgensym_d02da37b485b84ca_13 {
		// -- templateDecodeMsg ends here --

		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss12zgensym_d02da37b485b84ca_13 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of StructThatHasFieldsWithGenerics
var decodeMsgFieldOrder12zgensym_d02da37b485b84ca_13 = []string{"", ""}

var decodeMsgFieldSkip12zgensym_d02da37b485b84ca_13 = []bool{true, true}

// fieldsNotEmpty supports omitempty tags
func (z *StructThatHasFieldsWithGenerics) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 0
	}
	var fieldsInUse uint32 = 0

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *StructThatHasFieldsWithGenerics) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_d02da37b485b84ca_14 [2]bool
	fieldsInUse_zgensym_d02da37b485b84ca_15 := z.fieldsNotEmpty(empty_zgensym_d02da37b485b84ca_14[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_d02da37b485b84ca_15 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'StructThatHasFieldsWithGenerics'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x68, 0x61, 0x74, 0x48, 0x61, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x73})
	if err != nil {
		return err
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StructThatHasFieldsWithGenerics) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StructThatHasFieldsWithGenerics) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *StructThatHasFieldsWithGenerics) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields16zgensym_d02da37b485b84ca_17 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields16zgensym_d02da37b485b84ca_17 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields16zgensym_d02da37b485b84ca_17, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft16zgensym_d02da37b485b84ca_17 := totalEncodedFields16zgensym_d02da37b485b84ca_17
	missingFieldsLeft16zgensym_d02da37b485b84ca_17 := maxFields16zgensym_d02da37b485b84ca_17 - totalEncodedFields16zgensym_d02da37b485b84ca_17

	var nextMiss16zgensym_d02da37b485b84ca_17 int32 = -1
	var found16zgensym_d02da37b485b84ca_17 [maxFields16zgensym_d02da37b485b84ca_17]bool
	var curField16zgensym_d02da37b485b84ca_17 string

doneWithStruct16zgensym_d02da37b485b84ca_17:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft16zgensym_d02da37b485b84ca_17 > 0 || missingFieldsLeft16zgensym_d02da37b485b84ca_17 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft16zgensym_d02da37b485b84ca_17, missingFieldsLeft16zgensym_d02da37b485b84ca_17, msgp.ShowFound(found16zgensym_d02da37b485b84ca_17[:]), unmarshalMsgFieldOrder16zgensym_d02da37b485b84ca_17)
		if encodedFieldsLeft16zgensym_d02da37b485b84ca_17 > 0 {
			encodedFieldsLeft16zgensym_d02da37b485b84ca_17--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField16zgensym_d02da37b485b84ca_17 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss16zgensym_d02da37b485b84ca_17 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss16zgensym_d02da37b485b84ca_17 = 0
			}
			for nextMiss16zgensym_d02da37b485b84ca_17 < maxFields16zgensym_d02da37b485b84ca_17 && (found16zgensym_d02da37b485b84ca_17[nextMiss16zgensym_d02da37b485b84ca_17] || unmarshalMsgFieldSkip16zgensym_d02da37b485b84ca_17[nextMiss16zgensym_d02da37b485b84ca_17]) {
				nextMiss16zgensym_d02da37b485b84ca_17++
			}
			if nextMiss16zgensym_d02da37b485b84ca_17 == maxFields16zgensym_d02da37b485b84ca_17 {
				// filled all the empty fields!
				break doneWithStruct16zgensym_d02da37b485b84ca_17
			}
			missingFieldsLeft16zgensym_d02da37b485b84ca_17--
			curField16zgensym_d02da37b485b84ca_17 = unmarshalMsgFieldOrder16zgensym_d02da37b485b84ca_17[nextMiss16zgensym_d02da37b485b84ca_17]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField16zgensym_d02da37b485b84ca_17)
		switch curField16zgensym_d02da37b485b84ca_17 {
		// -- templateUnmarshalMsg ends here --

		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss16zgensym_d02da37b485b84ca_17 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of StructThatHasFieldsWithGenerics
var unmarshalMsgFieldOrder16zgensym_d02da37b485b84ca_17 = []string{"", ""}

var unmarshalMsgFieldSkip16zgensym_d02da37b485b84ca_17 = []bool{true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StructThatHasFieldsWithGenerics) Msgsize() (s int) {
	s = 1
	return
}
