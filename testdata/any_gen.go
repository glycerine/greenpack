// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package testdata

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HasAny) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_2d652a5c3e53356f_1 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_2d652a5c3e53356f_1 uint32
	totalEncodedFields0zgensym_2d652a5c3e53356f_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_2d652a5c3e53356f_1 := totalEncodedFields0zgensym_2d652a5c3e53356f_1
	missingFieldsLeft0zgensym_2d652a5c3e53356f_1 := maxFields0zgensym_2d652a5c3e53356f_1 - totalEncodedFields0zgensym_2d652a5c3e53356f_1

	var nextMiss0zgensym_2d652a5c3e53356f_1 int32 = -1
	var found0zgensym_2d652a5c3e53356f_1 [maxFields0zgensym_2d652a5c3e53356f_1]bool
	var curField0zgensym_2d652a5c3e53356f_1 string

doneWithStruct0zgensym_2d652a5c3e53356f_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_2d652a5c3e53356f_1 > 0 || missingFieldsLeft0zgensym_2d652a5c3e53356f_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft0zgensym_2d652a5c3e53356f_1, missingFieldsLeft0zgensym_2d652a5c3e53356f_1, msgp.ShowFound(found0zgensym_2d652a5c3e53356f_1[:]), decodeMsgFieldOrder0zgensym_2d652a5c3e53356f_1)
		if encodedFieldsLeft0zgensym_2d652a5c3e53356f_1 > 0 {
			encodedFieldsLeft0zgensym_2d652a5c3e53356f_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_2d652a5c3e53356f_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_2d652a5c3e53356f_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_2d652a5c3e53356f_1 = 0
			}
			for nextMiss0zgensym_2d652a5c3e53356f_1 < maxFields0zgensym_2d652a5c3e53356f_1 && (found0zgensym_2d652a5c3e53356f_1[nextMiss0zgensym_2d652a5c3e53356f_1] || decodeMsgFieldSkip0zgensym_2d652a5c3e53356f_1[nextMiss0zgensym_2d652a5c3e53356f_1]) {
				nextMiss0zgensym_2d652a5c3e53356f_1++
			}
			if nextMiss0zgensym_2d652a5c3e53356f_1 == maxFields0zgensym_2d652a5c3e53356f_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_2d652a5c3e53356f_1
			}
			missingFieldsLeft0zgensym_2d652a5c3e53356f_1--
			curField0zgensym_2d652a5c3e53356f_1 = decodeMsgFieldOrder0zgensym_2d652a5c3e53356f_1[nextMiss0zgensym_2d652a5c3e53356f_1]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField0zgensym_2d652a5c3e53356f_1)
		switch curField0zgensym_2d652a5c3e53356f_1 {
		// -- templateDecodeMsg ends here --

		case "Inside_zid00_rct":
			found0zgensym_2d652a5c3e53356f_1[0] = true
			conc_zgensym_2d652a5c3e53356f_3 := dc.NextStructName()
			if conc_zgensym_2d652a5c3e53356f_3 != "" {
				if cfac_zgensym_2d652a5c3e53356f_4, cfacOK_zgensym_2d652a5c3e53356f_4 := interface{}(z).(msgp.ConcreteFactory); cfacOK_zgensym_2d652a5c3e53356f_4 {
					targ_zgensym_2d652a5c3e53356f_2 := cfac_zgensym_2d652a5c3e53356f_4.NewValueAsInterface(0, conc_zgensym_2d652a5c3e53356f_3).(any)

					err = targ_zgensym_2d652a5c3e53356f_2.DecodeMsg(dc)
					if err != nil {
						return
					}
					z.Inside = targ_zgensym_2d652a5c3e53356f_2
					continue
				}
			}
			if z.Inside != nil {

				err = z.Inside.DecodeMsg(dc)
			}

			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_2d652a5c3e53356f_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HasAny
var decodeMsgFieldOrder0zgensym_2d652a5c3e53356f_1 = []string{"Inside_zid00_rct"}

var decodeMsgFieldSkip0zgensym_2d652a5c3e53356f_1 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *HasAny) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (z.Inside == nil) // interface, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *HasAny) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_2d652a5c3e53356f_5 [1]bool
	fieldsInUse_zgensym_2d652a5c3e53356f_6 := z.fieldsNotEmpty(empty_zgensym_2d652a5c3e53356f_5[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_2d652a5c3e53356f_6 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'HasAny'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x48, 0x61, 0x73, 0x41, 0x6e, 0x79})
	if err != nil {
		return err
	}

	if !empty_zgensym_2d652a5c3e53356f_5[0] {
		// write "Inside_zid00_rct"
		err = en.Append(0xb0, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = z.Inside.EncodeMsg(en)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HasAny) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Inside_zid00_rct"
		o = append(o, 0xb0, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		o, err = msgp.AppendIntf(o, z.Inside) // is.iface
		if err != nil {
			return
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HasAny) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HasAny) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields7zgensym_2d652a5c3e53356f_8 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields7zgensym_2d652a5c3e53356f_8 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields7zgensym_2d652a5c3e53356f_8, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft7zgensym_2d652a5c3e53356f_8 := totalEncodedFields7zgensym_2d652a5c3e53356f_8
	missingFieldsLeft7zgensym_2d652a5c3e53356f_8 := maxFields7zgensym_2d652a5c3e53356f_8 - totalEncodedFields7zgensym_2d652a5c3e53356f_8

	var nextMiss7zgensym_2d652a5c3e53356f_8 int32 = -1
	var found7zgensym_2d652a5c3e53356f_8 [maxFields7zgensym_2d652a5c3e53356f_8]bool
	var curField7zgensym_2d652a5c3e53356f_8 string

doneWithStruct7zgensym_2d652a5c3e53356f_8:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft7zgensym_2d652a5c3e53356f_8 > 0 || missingFieldsLeft7zgensym_2d652a5c3e53356f_8 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft7zgensym_2d652a5c3e53356f_8, missingFieldsLeft7zgensym_2d652a5c3e53356f_8, msgp.ShowFound(found7zgensym_2d652a5c3e53356f_8[:]), unmarshalMsgFieldOrder7zgensym_2d652a5c3e53356f_8)
		if encodedFieldsLeft7zgensym_2d652a5c3e53356f_8 > 0 {
			encodedFieldsLeft7zgensym_2d652a5c3e53356f_8--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField7zgensym_2d652a5c3e53356f_8 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss7zgensym_2d652a5c3e53356f_8 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss7zgensym_2d652a5c3e53356f_8 = 0
			}
			for nextMiss7zgensym_2d652a5c3e53356f_8 < maxFields7zgensym_2d652a5c3e53356f_8 && (found7zgensym_2d652a5c3e53356f_8[nextMiss7zgensym_2d652a5c3e53356f_8] || unmarshalMsgFieldSkip7zgensym_2d652a5c3e53356f_8[nextMiss7zgensym_2d652a5c3e53356f_8]) {
				nextMiss7zgensym_2d652a5c3e53356f_8++
			}
			if nextMiss7zgensym_2d652a5c3e53356f_8 == maxFields7zgensym_2d652a5c3e53356f_8 {
				// filled all the empty fields!
				break doneWithStruct7zgensym_2d652a5c3e53356f_8
			}
			missingFieldsLeft7zgensym_2d652a5c3e53356f_8--
			curField7zgensym_2d652a5c3e53356f_8 = unmarshalMsgFieldOrder7zgensym_2d652a5c3e53356f_8[nextMiss7zgensym_2d652a5c3e53356f_8]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField7zgensym_2d652a5c3e53356f_8)
		switch curField7zgensym_2d652a5c3e53356f_8 {
		// -- templateUnmarshalMsg ends here --

		case "Inside_zid00_rct":
			found7zgensym_2d652a5c3e53356f_8[0] = true
			var conc_zgensym_2d652a5c3e53356f_10 string
			conc_zgensym_2d652a5c3e53356f_10, bts = nbs.NextStructName(bts)
			if conc_zgensym_2d652a5c3e53356f_10 != "" {
				if cfac_zgensym_2d652a5c3e53356f_11, cfacOK_zgensym_2d652a5c3e53356f_11 := interface{}(z).(msgp.ConcreteFactory); cfacOK_zgensym_2d652a5c3e53356f_11 {
					targ_zgensym_2d652a5c3e53356f_9 := cfac_zgensym_2d652a5c3e53356f_11.NewValueAsInterface(0, conc_zgensym_2d652a5c3e53356f_10).(any)
					bts, err = targ_zgensym_2d652a5c3e53356f_9.UnmarshalMsg(bts)
					if err != nil {
						return
					}
					z.Inside = targ_zgensym_2d652a5c3e53356f_9
					continue
				}
			}
			if len(bts) == 0 {
				continue
			}
			if msgp.IsNil(bts) {
				bts = bts[1:]
				continue
			}
			bts, err = z.Inside.UnmarshalMsg(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss7zgensym_2d652a5c3e53356f_8 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HasAny
var unmarshalMsgFieldOrder7zgensym_2d652a5c3e53356f_8 = []string{"Inside_zid00_rct"}

var unmarshalMsgFieldSkip7zgensym_2d652a5c3e53356f_8 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HasAny) Msgsize() (s int) {
	s = 1 + 17 + msgp.GuessSize(z.Inside)
	return
}
