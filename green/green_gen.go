// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package green

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Field) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_2dd2157f23f15384_1 = 11

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_2dd2157f23f15384_1 uint32
	totalEncodedFields0zgensym_2dd2157f23f15384_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_2dd2157f23f15384_1 := totalEncodedFields0zgensym_2dd2157f23f15384_1
	missingFieldsLeft0zgensym_2dd2157f23f15384_1 := maxFields0zgensym_2dd2157f23f15384_1 - totalEncodedFields0zgensym_2dd2157f23f15384_1

	var nextMiss0zgensym_2dd2157f23f15384_1 int32 = -1
	var found0zgensym_2dd2157f23f15384_1 [maxFields0zgensym_2dd2157f23f15384_1]bool
	var curField0zgensym_2dd2157f23f15384_1 string

doneWithStruct0zgensym_2dd2157f23f15384_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_2dd2157f23f15384_1 > 0 || missingFieldsLeft0zgensym_2dd2157f23f15384_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft0zgensym_2dd2157f23f15384_1, missingFieldsLeft0zgensym_2dd2157f23f15384_1, msgp.ShowFound(found0zgensym_2dd2157f23f15384_1[:]), decodeMsgFieldOrder0zgensym_2dd2157f23f15384_1)
		if encodedFieldsLeft0zgensym_2dd2157f23f15384_1 > 0 {
			encodedFieldsLeft0zgensym_2dd2157f23f15384_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_2dd2157f23f15384_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_2dd2157f23f15384_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_2dd2157f23f15384_1 = 0
			}
			for nextMiss0zgensym_2dd2157f23f15384_1 < maxFields0zgensym_2dd2157f23f15384_1 && (found0zgensym_2dd2157f23f15384_1[nextMiss0zgensym_2dd2157f23f15384_1] || decodeMsgFieldSkip0zgensym_2dd2157f23f15384_1[nextMiss0zgensym_2dd2157f23f15384_1]) {
				nextMiss0zgensym_2dd2157f23f15384_1++
			}
			if nextMiss0zgensym_2dd2157f23f15384_1 == maxFields0zgensym_2dd2157f23f15384_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_2dd2157f23f15384_1
			}
			missingFieldsLeft0zgensym_2dd2157f23f15384_1--
			curField0zgensym_2dd2157f23f15384_1 = decodeMsgFieldOrder0zgensym_2dd2157f23f15384_1[nextMiss0zgensym_2dd2157f23f15384_1]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField0zgensym_2dd2157f23f15384_1)
		switch curField0zgensym_2dd2157f23f15384_1 {
		// -- templateDecodeMsg ends here --

		case "Zid__i64":
			found0zgensym_2dd2157f23f15384_1[0] = true
			z.Zid, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "FieldGoName__str":
			found0zgensym_2dd2157f23f15384_1[1] = true
			z.FieldGoName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FieldTagName__str":
			found0zgensym_2dd2157f23f15384_1[2] = true
			z.FieldTagName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FieldTypeStr__str":
			found0zgensym_2dd2157f23f15384_1[3] = true
			z.FieldTypeStr, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FieldCategory__rct":
			found0zgensym_2dd2157f23f15384_1[4] = true
			{
				var zgensym_2dd2157f23f15384_2 uint64
				zgensym_2dd2157f23f15384_2, err = dc.ReadUint64()
				z.FieldCategory = Zkind(zgensym_2dd2157f23f15384_2)
			}
			if err != nil {
				return
			}
		case "FieldPrimitive__rct":
			found0zgensym_2dd2157f23f15384_1[5] = true
			{
				var zgensym_2dd2157f23f15384_3 uint64
				zgensym_2dd2157f23f15384_3, err = dc.ReadUint64()
				z.FieldPrimitive = Zkind(zgensym_2dd2157f23f15384_3)
			}
			if err != nil {
				return
			}
		case "FieldFullType__ptr":
			found0zgensym_2dd2157f23f15384_1[6] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.FieldFullType != nil {
					dc.PushAlwaysNil()
					err = z.FieldFullType.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.FieldFullType == nil {
					z.FieldFullType = new(Ztype)
				}
				dc.DedupIndexEachPtr(z.FieldFullType)

				err = z.FieldFullType.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "OmitEmpty__boo":
			found0zgensym_2dd2157f23f15384_1[7] = true
			z.OmitEmpty, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Skip__boo":
			found0zgensym_2dd2157f23f15384_1[8] = true
			z.Skip, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Deprecated__boo":
			found0zgensym_2dd2157f23f15384_1[9] = true
			z.Deprecated, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "ShowZero__boo":
			found0zgensym_2dd2157f23f15384_1[10] = true
			z.ShowZero, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_2dd2157f23f15384_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Field
var decodeMsgFieldOrder0zgensym_2dd2157f23f15384_1 = []string{"Zid__i64", "FieldGoName__str", "FieldTagName__str", "FieldTypeStr__str", "FieldCategory__rct", "FieldPrimitive__rct", "FieldFullType__ptr", "OmitEmpty__boo", "Skip__boo", "Deprecated__boo", "ShowZero__boo"}

var decodeMsgFieldSkip0zgensym_2dd2157f23f15384_1 = []bool{false, false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Field) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 11
	}
	var fieldsInUse uint32 = 11
	isempty[0] = (z.Zid == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.FieldGoName) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.FieldTagName) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.FieldTypeStr) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.FieldCategory == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.FieldPrimitive == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.FieldFullType == nil) // pointer, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (!z.OmitEmpty) // bool, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (!z.Skip) // bool, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (!z.Deprecated) // bool, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (!z.ShowZero) // bool, omitempty
	if isempty[10] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Field) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_2dd2157f23f15384_4 [11]bool
	fieldsInUse_zgensym_2dd2157f23f15384_5 := z.fieldsNotEmpty(empty_zgensym_2dd2157f23f15384_4[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_2dd2157f23f15384_5 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Field'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x46, 0x69, 0x65, 0x6c, 0x64})
	if err != nil {
		return err
	}

	if !empty_zgensym_2dd2157f23f15384_4[0] {
		// write "Zid__i64"
		err = en.Append(0xa8, 0x5a, 0x69, 0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Zid)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_4[1] {
		// write "FieldGoName__str"
		err = en.Append(0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FieldGoName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_4[2] {
		// write "FieldTagName__str"
		err = en.Append(0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FieldTagName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_4[3] {
		// write "FieldTypeStr__str"
		err = en.Append(0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FieldTypeStr)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_4[4] {
		// write "FieldCategory__rct"
		err = en.Append(0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteUint64(uint64(z.FieldCategory))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_4[5] {
		// write "FieldPrimitive__rct"
		err = en.Append(0xb3, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteUint64(uint64(z.FieldPrimitive))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_4[6] {
		// write "FieldFullType__ptr"
		err = en.Append(0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.FieldFullType == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.FieldFullType.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_2dd2157f23f15384_4[7] {
		// write "OmitEmpty__boo"
		err = en.Append(0xae, 0x4f, 0x6d, 0x69, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.OmitEmpty)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_4[8] {
		// write "Skip__boo"
		err = en.Append(0xa9, 0x53, 0x6b, 0x69, 0x70, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.Skip)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_4[9] {
		// write "Deprecated__boo"
		err = en.Append(0xaf, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.Deprecated)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_4[10] {
		// write "ShowZero__boo"
		err = en.Append(0xad, 0x53, 0x68, 0x6f, 0x77, 0x5a, 0x65, 0x72, 0x6f, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.ShowZero)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Field) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [11]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Zid__i64"
		o = append(o, 0xa8, 0x5a, 0x69, 0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Zid)
	}

	if !empty[1] {
		// string "FieldGoName__str"
		o = append(o, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FieldGoName)
	}

	if !empty[2] {
		// string "FieldTagName__str"
		o = append(o, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FieldTagName)
	}

	if !empty[3] {
		// string "FieldTypeStr__str"
		o = append(o, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FieldTypeStr)
	}

	if !empty[4] {
		// string "FieldCategory__rct"
		o = append(o, 0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendUint64(o, uint64(z.FieldCategory))
	}

	if !empty[5] {
		// string "FieldPrimitive__rct"
		o = append(o, 0xb3, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendUint64(o, uint64(z.FieldPrimitive))
	}

	if !empty[6] {
		// string "FieldFullType__ptr"
		o = append(o, 0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.FieldFullType == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.FieldFullType.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[7] {
		// string "OmitEmpty__boo"
		o = append(o, 0xae, 0x4f, 0x6d, 0x69, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.OmitEmpty)
	}

	if !empty[8] {
		// string "Skip__boo"
		o = append(o, 0xa9, 0x53, 0x6b, 0x69, 0x70, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.Skip)
	}

	if !empty[9] {
		// string "Deprecated__boo"
		o = append(o, 0xaf, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.Deprecated)
	}

	if !empty[10] {
		// string "ShowZero__boo"
		o = append(o, 0xad, 0x53, 0x68, 0x6f, 0x77, 0x5a, 0x65, 0x72, 0x6f, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.ShowZero)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Field) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Field) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields6zgensym_2dd2157f23f15384_7 = 11

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields6zgensym_2dd2157f23f15384_7 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields6zgensym_2dd2157f23f15384_7, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft6zgensym_2dd2157f23f15384_7 := totalEncodedFields6zgensym_2dd2157f23f15384_7
	missingFieldsLeft6zgensym_2dd2157f23f15384_7 := maxFields6zgensym_2dd2157f23f15384_7 - totalEncodedFields6zgensym_2dd2157f23f15384_7

	var nextMiss6zgensym_2dd2157f23f15384_7 int32 = -1
	var found6zgensym_2dd2157f23f15384_7 [maxFields6zgensym_2dd2157f23f15384_7]bool
	var curField6zgensym_2dd2157f23f15384_7 string

doneWithStruct6zgensym_2dd2157f23f15384_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_2dd2157f23f15384_7 > 0 || missingFieldsLeft6zgensym_2dd2157f23f15384_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft6zgensym_2dd2157f23f15384_7, missingFieldsLeft6zgensym_2dd2157f23f15384_7, msgp.ShowFound(found6zgensym_2dd2157f23f15384_7[:]), unmarshalMsgFieldOrder6zgensym_2dd2157f23f15384_7)
		if encodedFieldsLeft6zgensym_2dd2157f23f15384_7 > 0 {
			encodedFieldsLeft6zgensym_2dd2157f23f15384_7--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField6zgensym_2dd2157f23f15384_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_2dd2157f23f15384_7 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss6zgensym_2dd2157f23f15384_7 = 0
			}
			for nextMiss6zgensym_2dd2157f23f15384_7 < maxFields6zgensym_2dd2157f23f15384_7 && (found6zgensym_2dd2157f23f15384_7[nextMiss6zgensym_2dd2157f23f15384_7] || unmarshalMsgFieldSkip6zgensym_2dd2157f23f15384_7[nextMiss6zgensym_2dd2157f23f15384_7]) {
				nextMiss6zgensym_2dd2157f23f15384_7++
			}
			if nextMiss6zgensym_2dd2157f23f15384_7 == maxFields6zgensym_2dd2157f23f15384_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_2dd2157f23f15384_7
			}
			missingFieldsLeft6zgensym_2dd2157f23f15384_7--
			curField6zgensym_2dd2157f23f15384_7 = unmarshalMsgFieldOrder6zgensym_2dd2157f23f15384_7[nextMiss6zgensym_2dd2157f23f15384_7]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField6zgensym_2dd2157f23f15384_7)
		switch curField6zgensym_2dd2157f23f15384_7 {
		// -- templateUnmarshalMsg ends here --

		case "Zid__i64":
			found6zgensym_2dd2157f23f15384_7[0] = true
			z.Zid, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "FieldGoName__str":
			found6zgensym_2dd2157f23f15384_7[1] = true
			z.FieldGoName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FieldTagName__str":
			found6zgensym_2dd2157f23f15384_7[2] = true
			z.FieldTagName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FieldTypeStr__str":
			found6zgensym_2dd2157f23f15384_7[3] = true
			z.FieldTypeStr, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FieldCategory__rct":
			found6zgensym_2dd2157f23f15384_7[4] = true
			{
				var zgensym_2dd2157f23f15384_8 uint64
				zgensym_2dd2157f23f15384_8, bts, err = nbs.ReadUint64Bytes(bts)

				if err != nil {
					return
				}
				z.FieldCategory = Zkind(zgensym_2dd2157f23f15384_8)
			}
		case "FieldPrimitive__rct":
			found6zgensym_2dd2157f23f15384_7[5] = true
			{
				var zgensym_2dd2157f23f15384_9 uint64
				zgensym_2dd2157f23f15384_9, bts, err = nbs.ReadUint64Bytes(bts)

				if err != nil {
					return
				}
				z.FieldPrimitive = Zkind(zgensym_2dd2157f23f15384_9)
			}
		case "FieldFullType__ptr":
			found6zgensym_2dd2157f23f15384_7[6] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.FieldFullType != nil {
					z.FieldFullType.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.FieldFullType {
						z.FieldFullType.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.FieldFullType == nil {
						z.FieldFullType = new(Ztype)
					}

					bts, err = z.FieldFullType.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "OmitEmpty__boo":
			found6zgensym_2dd2157f23f15384_7[7] = true
			z.OmitEmpty, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "Skip__boo":
			found6zgensym_2dd2157f23f15384_7[8] = true
			z.Skip, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "Deprecated__boo":
			found6zgensym_2dd2157f23f15384_7[9] = true
			z.Deprecated, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "ShowZero__boo":
			found6zgensym_2dd2157f23f15384_7[10] = true
			z.ShowZero, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_2dd2157f23f15384_7 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Field
var unmarshalMsgFieldOrder6zgensym_2dd2157f23f15384_7 = []string{"Zid__i64", "FieldGoName__str", "FieldTagName__str", "FieldTypeStr__str", "FieldCategory__rct", "FieldPrimitive__rct", "FieldFullType__ptr", "OmitEmpty__boo", "Skip__boo", "Deprecated__boo", "ShowZero__boo"}

var unmarshalMsgFieldSkip6zgensym_2dd2157f23f15384_7 = []bool{false, false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Field) Msgsize() (s int) {
	s = 1 + 9 + msgp.Int64Size + 17 + msgp.StringPrefixSize + len(z.FieldGoName) + 18 + msgp.StringPrefixSize + len(z.FieldTagName) + 18 + msgp.StringPrefixSize + len(z.FieldTypeStr) + 19 + msgp.Uint64Size + 20 + msgp.Uint64Size + 19
	if z.FieldFullType == nil {
		s += msgp.NilSize
	} else {
		s += z.FieldFullType.Msgsize()
	}
	s += 15 + msgp.BoolSize + 10 + msgp.BoolSize + 16 + msgp.BoolSize + 14 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Schema) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields14zgensym_2dd2157f23f15384_15 = 5

	// -- templateDecodeMsg starts here--
	var totalEncodedFields14zgensym_2dd2157f23f15384_15 uint32
	totalEncodedFields14zgensym_2dd2157f23f15384_15, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft14zgensym_2dd2157f23f15384_15 := totalEncodedFields14zgensym_2dd2157f23f15384_15
	missingFieldsLeft14zgensym_2dd2157f23f15384_15 := maxFields14zgensym_2dd2157f23f15384_15 - totalEncodedFields14zgensym_2dd2157f23f15384_15

	var nextMiss14zgensym_2dd2157f23f15384_15 int32 = -1
	var found14zgensym_2dd2157f23f15384_15 [maxFields14zgensym_2dd2157f23f15384_15]bool
	var curField14zgensym_2dd2157f23f15384_15 string

doneWithStruct14zgensym_2dd2157f23f15384_15:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft14zgensym_2dd2157f23f15384_15 > 0 || missingFieldsLeft14zgensym_2dd2157f23f15384_15 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft14zgensym_2dd2157f23f15384_15, missingFieldsLeft14zgensym_2dd2157f23f15384_15, msgp.ShowFound(found14zgensym_2dd2157f23f15384_15[:]), decodeMsgFieldOrder14zgensym_2dd2157f23f15384_15)
		if encodedFieldsLeft14zgensym_2dd2157f23f15384_15 > 0 {
			encodedFieldsLeft14zgensym_2dd2157f23f15384_15--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField14zgensym_2dd2157f23f15384_15 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss14zgensym_2dd2157f23f15384_15 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss14zgensym_2dd2157f23f15384_15 = 0
			}
			for nextMiss14zgensym_2dd2157f23f15384_15 < maxFields14zgensym_2dd2157f23f15384_15 && (found14zgensym_2dd2157f23f15384_15[nextMiss14zgensym_2dd2157f23f15384_15] || decodeMsgFieldSkip14zgensym_2dd2157f23f15384_15[nextMiss14zgensym_2dd2157f23f15384_15]) {
				nextMiss14zgensym_2dd2157f23f15384_15++
			}
			if nextMiss14zgensym_2dd2157f23f15384_15 == maxFields14zgensym_2dd2157f23f15384_15 {
				// filled all the empty fields!
				break doneWithStruct14zgensym_2dd2157f23f15384_15
			}
			missingFieldsLeft14zgensym_2dd2157f23f15384_15--
			curField14zgensym_2dd2157f23f15384_15 = decodeMsgFieldOrder14zgensym_2dd2157f23f15384_15[nextMiss14zgensym_2dd2157f23f15384_15]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField14zgensym_2dd2157f23f15384_15)
		switch curField14zgensym_2dd2157f23f15384_15 {
		// -- templateDecodeMsg ends here --

		case "SourcePath__str":
			found14zgensym_2dd2157f23f15384_15[0] = true
			z.SourcePath, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SourcePackage__str":
			found14zgensym_2dd2157f23f15384_15[1] = true
			z.SourcePackage, err = dc.ReadString()
			if err != nil {
				return
			}
		case "GreenSchemaId__i64":
			found14zgensym_2dd2157f23f15384_15[2] = true
			z.GreenSchemaId, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Structs__map":
			found14zgensym_2dd2157f23f15384_15[3] = true
			var zgensym_2dd2157f23f15384_16 uint32
			zgensym_2dd2157f23f15384_16, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Structs == nil && zgensym_2dd2157f23f15384_16 > 0 {
				z.Structs = make(map[string]*Struct, zgensym_2dd2157f23f15384_16)
			} else if len(z.Structs) > 0 {
				for key, _ := range z.Structs {
					delete(z.Structs, key)
				}
			}
			for zgensym_2dd2157f23f15384_16 > 0 {
				zgensym_2dd2157f23f15384_16--
				var zgensym_2dd2157f23f15384_10 string
				var zgensym_2dd2157f23f15384_11 *Struct
				zgensym_2dd2157f23f15384_10, err = dc.ReadString()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					zgensym_2dd2157f23f15384_11 = nil
				} else {
					if zgensym_2dd2157f23f15384_11 == nil {
						zgensym_2dd2157f23f15384_11 = new(Struct)
					}
					dc.DedupIndexEachPtr(zgensym_2dd2157f23f15384_11)

					const maxFields17zgensym_2dd2157f23f15384_18 = 2

					// -- templateDecodeMsg starts here--
					var totalEncodedFields17zgensym_2dd2157f23f15384_18 uint32
					totalEncodedFields17zgensym_2dd2157f23f15384_18, err = dc.ReadMapHeader()
					if err != nil {
						return
					}
					encodedFieldsLeft17zgensym_2dd2157f23f15384_18 := totalEncodedFields17zgensym_2dd2157f23f15384_18
					missingFieldsLeft17zgensym_2dd2157f23f15384_18 := maxFields17zgensym_2dd2157f23f15384_18 - totalEncodedFields17zgensym_2dd2157f23f15384_18

					var nextMiss17zgensym_2dd2157f23f15384_18 int32 = -1
					var found17zgensym_2dd2157f23f15384_18 [maxFields17zgensym_2dd2157f23f15384_18]bool
					var curField17zgensym_2dd2157f23f15384_18 string

				doneWithStruct17zgensym_2dd2157f23f15384_18:
					// First fill all the encoded fields, then
					// treat the remaining, missing fields, as Nil.
					for encodedFieldsLeft17zgensym_2dd2157f23f15384_18 > 0 || missingFieldsLeft17zgensym_2dd2157f23f15384_18 > 0 {
						//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft17zgensym_2dd2157f23f15384_18, missingFieldsLeft17zgensym_2dd2157f23f15384_18, msgp.ShowFound(found17zgensym_2dd2157f23f15384_18[:]), decodeMsgFieldOrder17zgensym_2dd2157f23f15384_18)
						if encodedFieldsLeft17zgensym_2dd2157f23f15384_18 > 0 {
							encodedFieldsLeft17zgensym_2dd2157f23f15384_18--
							field, err = dc.ReadMapKeyPtr()
							if err != nil {
								return
							}
							curField17zgensym_2dd2157f23f15384_18 = msgp.UnsafeString(field)
						} else {
							//missing fields need handling
							if nextMiss17zgensym_2dd2157f23f15384_18 < 0 {
								// tell the reader to only give us Nils
								// until further notice.
								dc.PushAlwaysNil()
								nextMiss17zgensym_2dd2157f23f15384_18 = 0
							}
							for nextMiss17zgensym_2dd2157f23f15384_18 < maxFields17zgensym_2dd2157f23f15384_18 && (found17zgensym_2dd2157f23f15384_18[nextMiss17zgensym_2dd2157f23f15384_18] || decodeMsgFieldSkip17zgensym_2dd2157f23f15384_18[nextMiss17zgensym_2dd2157f23f15384_18]) {
								nextMiss17zgensym_2dd2157f23f15384_18++
							}
							if nextMiss17zgensym_2dd2157f23f15384_18 == maxFields17zgensym_2dd2157f23f15384_18 {
								// filled all the empty fields!
								break doneWithStruct17zgensym_2dd2157f23f15384_18
							}
							missingFieldsLeft17zgensym_2dd2157f23f15384_18--
							curField17zgensym_2dd2157f23f15384_18 = decodeMsgFieldOrder17zgensym_2dd2157f23f15384_18[nextMiss17zgensym_2dd2157f23f15384_18]
						}
						//fmt.Printf("switching on curField: '%%v'\n", curField17zgensym_2dd2157f23f15384_18)
						switch curField17zgensym_2dd2157f23f15384_18 {
						// -- templateDecodeMsg ends here --

						case "StructName__str":
							found17zgensym_2dd2157f23f15384_18[0] = true
							zgensym_2dd2157f23f15384_11.StructName, err = dc.ReadString()
							if err != nil {
								return
							}
						case "Fields__slc":
							found17zgensym_2dd2157f23f15384_18[1] = true
							var zgensym_2dd2157f23f15384_19 uint32
							zgensym_2dd2157f23f15384_19, err = dc.ReadArrayHeader()
							if err != nil {
								return
							}
							if cap(zgensym_2dd2157f23f15384_11.Fields) >= int(zgensym_2dd2157f23f15384_19) {
								zgensym_2dd2157f23f15384_11.Fields = (zgensym_2dd2157f23f15384_11.Fields)[:zgensym_2dd2157f23f15384_19]
							} else {
								zgensym_2dd2157f23f15384_11.Fields = make([]Field, zgensym_2dd2157f23f15384_19)
							}
							for zgensym_2dd2157f23f15384_12 := range zgensym_2dd2157f23f15384_11.Fields {
								err = zgensym_2dd2157f23f15384_11.Fields[zgensym_2dd2157f23f15384_12].DecodeMsg(dc)
								if err != nil {
									return
								}
							}
						default:
							err = dc.Skip()
							if err != nil {
								return
							}
						}
					}
					if nextMiss17zgensym_2dd2157f23f15384_18 != -1 {
						dc.PopAlwaysNil()
					}

				}
				z.Structs[zgensym_2dd2157f23f15384_10] = zgensym_2dd2157f23f15384_11
			}
		case "Imports__slc":
			found14zgensym_2dd2157f23f15384_15[4] = true
			var zgensym_2dd2157f23f15384_20 uint32
			zgensym_2dd2157f23f15384_20, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Imports) >= int(zgensym_2dd2157f23f15384_20) {
				z.Imports = (z.Imports)[:zgensym_2dd2157f23f15384_20]
			} else {
				z.Imports = make([]string, zgensym_2dd2157f23f15384_20)
			}
			for zgensym_2dd2157f23f15384_13 := range z.Imports {
				z.Imports[zgensym_2dd2157f23f15384_13], err = dc.ReadString()
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss14zgensym_2dd2157f23f15384_15 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Schema
var decodeMsgFieldOrder14zgensym_2dd2157f23f15384_15 = []string{"SourcePath__str", "SourcePackage__str", "GreenSchemaId__i64", "Structs__map", "Imports__slc"}

var decodeMsgFieldSkip14zgensym_2dd2157f23f15384_15 = []bool{false, false, false, false, false}

// fields of Struct
var decodeMsgFieldOrder17zgensym_2dd2157f23f15384_18 = []string{"StructName__str", "Fields__slc"}

var decodeMsgFieldSkip17zgensym_2dd2157f23f15384_18 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Schema) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (len(z.SourcePath) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.SourcePackage) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.GreenSchemaId == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Structs) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.Imports) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Schema) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_2dd2157f23f15384_21 [5]bool
	fieldsInUse_zgensym_2dd2157f23f15384_22 := z.fieldsNotEmpty(empty_zgensym_2dd2157f23f15384_21[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_2dd2157f23f15384_22 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Schema'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x63, 0x68, 0x65, 0x6d, 0x61})
	if err != nil {
		return err
	}

	if !empty_zgensym_2dd2157f23f15384_21[0] {
		// write "SourcePath__str"
		err = en.Append(0xaf, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SourcePath)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_21[1] {
		// write "SourcePackage__str"
		err = en.Append(0xb2, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SourcePackage)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_21[2] {
		// write "GreenSchemaId__i64"
		err = en.Append(0xb2, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.GreenSchemaId)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_21[3] {
		// write "Structs__map"
		err = en.Append(0xac, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Structs)))
		if err != nil {
			return
		}
		for zgensym_2dd2157f23f15384_10, zgensym_2dd2157f23f15384_11 := range z.Structs {
			err = en.WriteString(zgensym_2dd2157f23f15384_10)
			if err != nil {
				return
			}
			// gPtr.encodeGen():

			if zgensym_2dd2157f23f15384_11 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {

				// honor the omitempty tags
				var empty_zgensym_2dd2157f23f15384_23 [2]bool
				fieldsInUse_zgensym_2dd2157f23f15384_24 := zgensym_2dd2157f23f15384_11.fieldsNotEmpty(empty_zgensym_2dd2157f23f15384_23[:])

				// map header
				err = en.WriteMapHeader(fieldsInUse_zgensym_2dd2157f23f15384_24 + 1)
				if err != nil {
					return err
				}

				// runtime struct type identification for 'Struct'
				err = en.Append(0xa1, 0x40)
				if err != nil {
					return err
				}
				err = en.WriteStringFromBytes([]byte{0x53, 0x74, 0x72, 0x75, 0x63, 0x74})
				if err != nil {
					return err
				}

				if !empty_zgensym_2dd2157f23f15384_23[0] {
					// write "StructName__str"
					err = en.Append(0xaf, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
					if err != nil {
						return err
					}
					err = en.WriteString(zgensym_2dd2157f23f15384_11.StructName)
					if err != nil {
						return
					}
				}

				if !empty_zgensym_2dd2157f23f15384_23[1] {
					// write "Fields__slc"
					err = en.Append(0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
					if err != nil {
						return err
					}
					err = en.WriteArrayHeader(uint32(len(zgensym_2dd2157f23f15384_11.Fields)))
					if err != nil {
						return
					}
					for zgensym_2dd2157f23f15384_12 := range zgensym_2dd2157f23f15384_11.Fields {
						err = zgensym_2dd2157f23f15384_11.Fields[zgensym_2dd2157f23f15384_12].EncodeMsg(en)
						if err != nil {
							return
						}
					}
				}

			}
		}
	}

	if !empty_zgensym_2dd2157f23f15384_21[4] {
		// write "Imports__slc"
		err = en.Append(0xac, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Imports)))
		if err != nil {
			return
		}
		for zgensym_2dd2157f23f15384_13 := range z.Imports {
			err = en.WriteString(z.Imports[zgensym_2dd2157f23f15384_13])
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Schema) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "SourcePath__str"
		o = append(o, 0xaf, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SourcePath)
	}

	if !empty[1] {
		// string "SourcePackage__str"
		o = append(o, 0xb2, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SourcePackage)
	}

	if !empty[2] {
		// string "GreenSchemaId__i64"
		o = append(o, 0xb2, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.GreenSchemaId)
	}

	if !empty[3] {
		// string "Structs__map"
		o = append(o, 0xac, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.Structs)))
		for zgensym_2dd2157f23f15384_10, zgensym_2dd2157f23f15384_11 := range z.Structs {
			o = msgp.AppendString(o, zgensym_2dd2157f23f15384_10)
			// marshalGen.gPtr()

			if zgensym_2dd2157f23f15384_11 == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				// honor the omitempty tags
				var empty [2]bool
				fieldsInUse := zgensym_2dd2157f23f15384_11.fieldsNotEmpty(empty[:])
				o = msgp.AppendMapHeader(o, fieldsInUse)

				if !empty[0] {
					// string "StructName__str"
					o = append(o, 0xaf, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
					o = msgp.AppendString(o, zgensym_2dd2157f23f15384_11.StructName)
				}

				if !empty[1] {
					// string "Fields__slc"
					o = append(o, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
					o = msgp.AppendArrayHeader(o, uint32(len(zgensym_2dd2157f23f15384_11.Fields)))
					for zgensym_2dd2157f23f15384_12 := range zgensym_2dd2157f23f15384_11.Fields {
						o, err = zgensym_2dd2157f23f15384_11.Fields[zgensym_2dd2157f23f15384_12].MarshalMsg(o) // not is.iface
						if err != nil {
							return
						}
					}
				}

			}
		}
	}

	if !empty[4] {
		// string "Imports__slc"
		o = append(o, 0xac, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Imports)))
		for zgensym_2dd2157f23f15384_13 := range z.Imports {
			o = msgp.AppendString(o, z.Imports[zgensym_2dd2157f23f15384_13])
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Schema) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Schema) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields25zgensym_2dd2157f23f15384_26 = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields25zgensym_2dd2157f23f15384_26 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields25zgensym_2dd2157f23f15384_26, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft25zgensym_2dd2157f23f15384_26 := totalEncodedFields25zgensym_2dd2157f23f15384_26
	missingFieldsLeft25zgensym_2dd2157f23f15384_26 := maxFields25zgensym_2dd2157f23f15384_26 - totalEncodedFields25zgensym_2dd2157f23f15384_26

	var nextMiss25zgensym_2dd2157f23f15384_26 int32 = -1
	var found25zgensym_2dd2157f23f15384_26 [maxFields25zgensym_2dd2157f23f15384_26]bool
	var curField25zgensym_2dd2157f23f15384_26 string

doneWithStruct25zgensym_2dd2157f23f15384_26:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft25zgensym_2dd2157f23f15384_26 > 0 || missingFieldsLeft25zgensym_2dd2157f23f15384_26 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft25zgensym_2dd2157f23f15384_26, missingFieldsLeft25zgensym_2dd2157f23f15384_26, msgp.ShowFound(found25zgensym_2dd2157f23f15384_26[:]), unmarshalMsgFieldOrder25zgensym_2dd2157f23f15384_26)
		if encodedFieldsLeft25zgensym_2dd2157f23f15384_26 > 0 {
			encodedFieldsLeft25zgensym_2dd2157f23f15384_26--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField25zgensym_2dd2157f23f15384_26 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss25zgensym_2dd2157f23f15384_26 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss25zgensym_2dd2157f23f15384_26 = 0
			}
			for nextMiss25zgensym_2dd2157f23f15384_26 < maxFields25zgensym_2dd2157f23f15384_26 && (found25zgensym_2dd2157f23f15384_26[nextMiss25zgensym_2dd2157f23f15384_26] || unmarshalMsgFieldSkip25zgensym_2dd2157f23f15384_26[nextMiss25zgensym_2dd2157f23f15384_26]) {
				nextMiss25zgensym_2dd2157f23f15384_26++
			}
			if nextMiss25zgensym_2dd2157f23f15384_26 == maxFields25zgensym_2dd2157f23f15384_26 {
				// filled all the empty fields!
				break doneWithStruct25zgensym_2dd2157f23f15384_26
			}
			missingFieldsLeft25zgensym_2dd2157f23f15384_26--
			curField25zgensym_2dd2157f23f15384_26 = unmarshalMsgFieldOrder25zgensym_2dd2157f23f15384_26[nextMiss25zgensym_2dd2157f23f15384_26]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField25zgensym_2dd2157f23f15384_26)
		switch curField25zgensym_2dd2157f23f15384_26 {
		// -- templateUnmarshalMsg ends here --

		case "SourcePath__str":
			found25zgensym_2dd2157f23f15384_26[0] = true
			z.SourcePath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SourcePackage__str":
			found25zgensym_2dd2157f23f15384_26[1] = true
			z.SourcePackage, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "GreenSchemaId__i64":
			found25zgensym_2dd2157f23f15384_26[2] = true
			z.GreenSchemaId, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Structs__map":
			found25zgensym_2dd2157f23f15384_26[3] = true
			if nbs.AlwaysNil {
				if len(z.Structs) > 0 {
					for key, _ := range z.Structs {
						delete(z.Structs, key)
					}
				}

			} else {

				var zgensym_2dd2157f23f15384_27 uint32
				zgensym_2dd2157f23f15384_27, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Structs == nil && zgensym_2dd2157f23f15384_27 > 0 {
					z.Structs = make(map[string]*Struct, zgensym_2dd2157f23f15384_27)
				} else if len(z.Structs) > 0 {
					for key, _ := range z.Structs {
						delete(z.Structs, key)
					}
				}
				for zgensym_2dd2157f23f15384_27 > 0 {
					var zgensym_2dd2157f23f15384_10 string
					var zgensym_2dd2157f23f15384_11 *Struct
					zgensym_2dd2157f23f15384_27--
					zgensym_2dd2157f23f15384_10, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					// default gPtr logic.
					if nbs.PeekNil(bts) && zgensym_2dd2157f23f15384_11 == nil {
						// consume the nil
						bts, err = nbs.ReadNilBytes(bts)
						if err != nil {
							return
						}
					} else {
						// read as-if the wire has bytes, letting nbs take care of nils.

						if zgensym_2dd2157f23f15384_11 == nil {
							zgensym_2dd2157f23f15384_11 = new(Struct)
						}

						const maxFields28zgensym_2dd2157f23f15384_29 = 2

						// -- templateUnmarshalMsg starts here--
						var totalEncodedFields28zgensym_2dd2157f23f15384_29 uint32
						if !nbs.AlwaysNil {
							totalEncodedFields28zgensym_2dd2157f23f15384_29, bts, err = nbs.ReadMapHeaderBytes(bts)
							if err != nil {
								return
							}
						}
						encodedFieldsLeft28zgensym_2dd2157f23f15384_29 := totalEncodedFields28zgensym_2dd2157f23f15384_29
						missingFieldsLeft28zgensym_2dd2157f23f15384_29 := maxFields28zgensym_2dd2157f23f15384_29 - totalEncodedFields28zgensym_2dd2157f23f15384_29

						var nextMiss28zgensym_2dd2157f23f15384_29 int32 = -1
						var found28zgensym_2dd2157f23f15384_29 [maxFields28zgensym_2dd2157f23f15384_29]bool
						var curField28zgensym_2dd2157f23f15384_29 string

					doneWithStruct28zgensym_2dd2157f23f15384_29:
						// First fill all the encoded fields, then
						// treat the remaining, missing fields, as Nil.
						for encodedFieldsLeft28zgensym_2dd2157f23f15384_29 > 0 || missingFieldsLeft28zgensym_2dd2157f23f15384_29 > 0 {
							//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft28zgensym_2dd2157f23f15384_29, missingFieldsLeft28zgensym_2dd2157f23f15384_29, msgp.ShowFound(found28zgensym_2dd2157f23f15384_29[:]), unmarshalMsgFieldOrder28zgensym_2dd2157f23f15384_29)
							if encodedFieldsLeft28zgensym_2dd2157f23f15384_29 > 0 {
								encodedFieldsLeft28zgensym_2dd2157f23f15384_29--
								field, bts, err = nbs.ReadMapKeyZC(bts)
								if err != nil {
									return
								}
								curField28zgensym_2dd2157f23f15384_29 = msgp.UnsafeString(field)
							} else {
								//missing fields need handling
								if nextMiss28zgensym_2dd2157f23f15384_29 < 0 {
									// set bts to contain just mnil (0xc0)
									bts = nbs.PushAlwaysNil(bts)
									nextMiss28zgensym_2dd2157f23f15384_29 = 0
								}
								for nextMiss28zgensym_2dd2157f23f15384_29 < maxFields28zgensym_2dd2157f23f15384_29 && (found28zgensym_2dd2157f23f15384_29[nextMiss28zgensym_2dd2157f23f15384_29] || unmarshalMsgFieldSkip28zgensym_2dd2157f23f15384_29[nextMiss28zgensym_2dd2157f23f15384_29]) {
									nextMiss28zgensym_2dd2157f23f15384_29++
								}
								if nextMiss28zgensym_2dd2157f23f15384_29 == maxFields28zgensym_2dd2157f23f15384_29 {
									// filled all the empty fields!
									break doneWithStruct28zgensym_2dd2157f23f15384_29
								}
								missingFieldsLeft28zgensym_2dd2157f23f15384_29--
								curField28zgensym_2dd2157f23f15384_29 = unmarshalMsgFieldOrder28zgensym_2dd2157f23f15384_29[nextMiss28zgensym_2dd2157f23f15384_29]
							}
							//fmt.Printf("switching on curField: '%%v'\n", curField28zgensym_2dd2157f23f15384_29)
							switch curField28zgensym_2dd2157f23f15384_29 {
							// -- templateUnmarshalMsg ends here --

							case "StructName__str":
								found28zgensym_2dd2157f23f15384_29[0] = true
								zgensym_2dd2157f23f15384_11.StructName, bts, err = nbs.ReadStringBytes(bts)

								if err != nil {
									return
								}
							case "Fields__slc":
								found28zgensym_2dd2157f23f15384_29[1] = true
								if nbs.AlwaysNil {
									(zgensym_2dd2157f23f15384_11.Fields) = (zgensym_2dd2157f23f15384_11.Fields)[:0]
								} else {

									var zgensym_2dd2157f23f15384_30 uint32
									zgensym_2dd2157f23f15384_30, bts, err = nbs.ReadArrayHeaderBytes(bts)
									if err != nil {
										return
									}
									if cap(zgensym_2dd2157f23f15384_11.Fields) >= int(zgensym_2dd2157f23f15384_30) {
										zgensym_2dd2157f23f15384_11.Fields = (zgensym_2dd2157f23f15384_11.Fields)[:zgensym_2dd2157f23f15384_30]
									} else {
										zgensym_2dd2157f23f15384_11.Fields = make([]Field, zgensym_2dd2157f23f15384_30)
									}
									for zgensym_2dd2157f23f15384_12 := range zgensym_2dd2157f23f15384_11.Fields {
										bts, err = zgensym_2dd2157f23f15384_11.Fields[zgensym_2dd2157f23f15384_12].UnmarshalMsg(bts)
										if err != nil {
											return
										}
									}
								}
							default:
								bts, err = msgp.Skip(bts)
								if err != nil {
									return
								}
							}
						}
						if nextMiss28zgensym_2dd2157f23f15384_29 != -1 {
							bts = nbs.PopAlwaysNil()
						}

					}
					z.Structs[zgensym_2dd2157f23f15384_10] = zgensym_2dd2157f23f15384_11
				}
			}
		case "Imports__slc":
			found25zgensym_2dd2157f23f15384_26[4] = true
			if nbs.AlwaysNil {
				(z.Imports) = (z.Imports)[:0]
			} else {

				var zgensym_2dd2157f23f15384_31 uint32
				zgensym_2dd2157f23f15384_31, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Imports) >= int(zgensym_2dd2157f23f15384_31) {
					z.Imports = (z.Imports)[:zgensym_2dd2157f23f15384_31]
				} else {
					z.Imports = make([]string, zgensym_2dd2157f23f15384_31)
				}
				for zgensym_2dd2157f23f15384_13 := range z.Imports {
					z.Imports[zgensym_2dd2157f23f15384_13], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss25zgensym_2dd2157f23f15384_26 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Schema
var unmarshalMsgFieldOrder25zgensym_2dd2157f23f15384_26 = []string{"SourcePath__str", "SourcePackage__str", "GreenSchemaId__i64", "Structs__map", "Imports__slc"}

var unmarshalMsgFieldSkip25zgensym_2dd2157f23f15384_26 = []bool{false, false, false, false, false}

// fields of Struct
var unmarshalMsgFieldOrder28zgensym_2dd2157f23f15384_29 = []string{"StructName__str", "Fields__slc"}

var unmarshalMsgFieldSkip28zgensym_2dd2157f23f15384_29 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Schema) Msgsize() (s int) {
	s = 1 + 16 + msgp.StringPrefixSize + len(z.SourcePath) + 19 + msgp.StringPrefixSize + len(z.SourcePackage) + 19 + msgp.Int64Size + 13 + msgp.MapHeaderSize
	if z.Structs != nil {
		for zgensym_2dd2157f23f15384_10, zgensym_2dd2157f23f15384_11 := range z.Structs {
			_ = zgensym_2dd2157f23f15384_11
			_ = zgensym_2dd2157f23f15384_10
			s += msgp.StringPrefixSize + len(zgensym_2dd2157f23f15384_10)
			if zgensym_2dd2157f23f15384_11 == nil {
				s += msgp.NilSize
			} else {
				s += 1 + 16 + msgp.StringPrefixSize + len(zgensym_2dd2157f23f15384_11.StructName) + 12 + msgp.ArrayHeaderSize
				for zgensym_2dd2157f23f15384_12 := range zgensym_2dd2157f23f15384_11.Fields {
					s += zgensym_2dd2157f23f15384_11.Fields[zgensym_2dd2157f23f15384_12].Msgsize()
				}
			}
		}
	}
	s += 13 + msgp.ArrayHeaderSize
	for zgensym_2dd2157f23f15384_13 := range z.Imports {
		s += msgp.StringPrefixSize + len(z.Imports[zgensym_2dd2157f23f15384_13])
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Struct) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields33zgensym_2dd2157f23f15384_34 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields33zgensym_2dd2157f23f15384_34 uint32
	totalEncodedFields33zgensym_2dd2157f23f15384_34, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft33zgensym_2dd2157f23f15384_34 := totalEncodedFields33zgensym_2dd2157f23f15384_34
	missingFieldsLeft33zgensym_2dd2157f23f15384_34 := maxFields33zgensym_2dd2157f23f15384_34 - totalEncodedFields33zgensym_2dd2157f23f15384_34

	var nextMiss33zgensym_2dd2157f23f15384_34 int32 = -1
	var found33zgensym_2dd2157f23f15384_34 [maxFields33zgensym_2dd2157f23f15384_34]bool
	var curField33zgensym_2dd2157f23f15384_34 string

doneWithStruct33zgensym_2dd2157f23f15384_34:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft33zgensym_2dd2157f23f15384_34 > 0 || missingFieldsLeft33zgensym_2dd2157f23f15384_34 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft33zgensym_2dd2157f23f15384_34, missingFieldsLeft33zgensym_2dd2157f23f15384_34, msgp.ShowFound(found33zgensym_2dd2157f23f15384_34[:]), decodeMsgFieldOrder33zgensym_2dd2157f23f15384_34)
		if encodedFieldsLeft33zgensym_2dd2157f23f15384_34 > 0 {
			encodedFieldsLeft33zgensym_2dd2157f23f15384_34--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField33zgensym_2dd2157f23f15384_34 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss33zgensym_2dd2157f23f15384_34 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss33zgensym_2dd2157f23f15384_34 = 0
			}
			for nextMiss33zgensym_2dd2157f23f15384_34 < maxFields33zgensym_2dd2157f23f15384_34 && (found33zgensym_2dd2157f23f15384_34[nextMiss33zgensym_2dd2157f23f15384_34] || decodeMsgFieldSkip33zgensym_2dd2157f23f15384_34[nextMiss33zgensym_2dd2157f23f15384_34]) {
				nextMiss33zgensym_2dd2157f23f15384_34++
			}
			if nextMiss33zgensym_2dd2157f23f15384_34 == maxFields33zgensym_2dd2157f23f15384_34 {
				// filled all the empty fields!
				break doneWithStruct33zgensym_2dd2157f23f15384_34
			}
			missingFieldsLeft33zgensym_2dd2157f23f15384_34--
			curField33zgensym_2dd2157f23f15384_34 = decodeMsgFieldOrder33zgensym_2dd2157f23f15384_34[nextMiss33zgensym_2dd2157f23f15384_34]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField33zgensym_2dd2157f23f15384_34)
		switch curField33zgensym_2dd2157f23f15384_34 {
		// -- templateDecodeMsg ends here --

		case "StructName__str":
			found33zgensym_2dd2157f23f15384_34[0] = true
			z.StructName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Fields__slc":
			found33zgensym_2dd2157f23f15384_34[1] = true
			var zgensym_2dd2157f23f15384_35 uint32
			zgensym_2dd2157f23f15384_35, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Fields) >= int(zgensym_2dd2157f23f15384_35) {
				z.Fields = (z.Fields)[:zgensym_2dd2157f23f15384_35]
			} else {
				z.Fields = make([]Field, zgensym_2dd2157f23f15384_35)
			}
			for zgensym_2dd2157f23f15384_32 := range z.Fields {
				err = z.Fields[zgensym_2dd2157f23f15384_32].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss33zgensym_2dd2157f23f15384_34 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Struct
var decodeMsgFieldOrder33zgensym_2dd2157f23f15384_34 = []string{"StructName__str", "Fields__slc"}

var decodeMsgFieldSkip33zgensym_2dd2157f23f15384_34 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Struct) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.StructName) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Fields) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Struct) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_2dd2157f23f15384_36 [2]bool
	fieldsInUse_zgensym_2dd2157f23f15384_37 := z.fieldsNotEmpty(empty_zgensym_2dd2157f23f15384_36[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_2dd2157f23f15384_37 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Struct'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x74, 0x72, 0x75, 0x63, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_2dd2157f23f15384_36[0] {
		// write "StructName__str"
		err = en.Append(0xaf, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.StructName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_36[1] {
		// write "Fields__slc"
		err = en.Append(0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Fields)))
		if err != nil {
			return
		}
		for zgensym_2dd2157f23f15384_32 := range z.Fields {
			err = z.Fields[zgensym_2dd2157f23f15384_32].EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Struct) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "StructName__str"
		o = append(o, 0xaf, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.StructName)
	}

	if !empty[1] {
		// string "Fields__slc"
		o = append(o, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Fields)))
		for zgensym_2dd2157f23f15384_32 := range z.Fields {
			o, err = z.Fields[zgensym_2dd2157f23f15384_32].MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Struct) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Struct) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields38zgensym_2dd2157f23f15384_39 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields38zgensym_2dd2157f23f15384_39 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields38zgensym_2dd2157f23f15384_39, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft38zgensym_2dd2157f23f15384_39 := totalEncodedFields38zgensym_2dd2157f23f15384_39
	missingFieldsLeft38zgensym_2dd2157f23f15384_39 := maxFields38zgensym_2dd2157f23f15384_39 - totalEncodedFields38zgensym_2dd2157f23f15384_39

	var nextMiss38zgensym_2dd2157f23f15384_39 int32 = -1
	var found38zgensym_2dd2157f23f15384_39 [maxFields38zgensym_2dd2157f23f15384_39]bool
	var curField38zgensym_2dd2157f23f15384_39 string

doneWithStruct38zgensym_2dd2157f23f15384_39:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft38zgensym_2dd2157f23f15384_39 > 0 || missingFieldsLeft38zgensym_2dd2157f23f15384_39 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft38zgensym_2dd2157f23f15384_39, missingFieldsLeft38zgensym_2dd2157f23f15384_39, msgp.ShowFound(found38zgensym_2dd2157f23f15384_39[:]), unmarshalMsgFieldOrder38zgensym_2dd2157f23f15384_39)
		if encodedFieldsLeft38zgensym_2dd2157f23f15384_39 > 0 {
			encodedFieldsLeft38zgensym_2dd2157f23f15384_39--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField38zgensym_2dd2157f23f15384_39 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss38zgensym_2dd2157f23f15384_39 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss38zgensym_2dd2157f23f15384_39 = 0
			}
			for nextMiss38zgensym_2dd2157f23f15384_39 < maxFields38zgensym_2dd2157f23f15384_39 && (found38zgensym_2dd2157f23f15384_39[nextMiss38zgensym_2dd2157f23f15384_39] || unmarshalMsgFieldSkip38zgensym_2dd2157f23f15384_39[nextMiss38zgensym_2dd2157f23f15384_39]) {
				nextMiss38zgensym_2dd2157f23f15384_39++
			}
			if nextMiss38zgensym_2dd2157f23f15384_39 == maxFields38zgensym_2dd2157f23f15384_39 {
				// filled all the empty fields!
				break doneWithStruct38zgensym_2dd2157f23f15384_39
			}
			missingFieldsLeft38zgensym_2dd2157f23f15384_39--
			curField38zgensym_2dd2157f23f15384_39 = unmarshalMsgFieldOrder38zgensym_2dd2157f23f15384_39[nextMiss38zgensym_2dd2157f23f15384_39]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField38zgensym_2dd2157f23f15384_39)
		switch curField38zgensym_2dd2157f23f15384_39 {
		// -- templateUnmarshalMsg ends here --

		case "StructName__str":
			found38zgensym_2dd2157f23f15384_39[0] = true
			z.StructName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Fields__slc":
			found38zgensym_2dd2157f23f15384_39[1] = true
			if nbs.AlwaysNil {
				(z.Fields) = (z.Fields)[:0]
			} else {

				var zgensym_2dd2157f23f15384_40 uint32
				zgensym_2dd2157f23f15384_40, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Fields) >= int(zgensym_2dd2157f23f15384_40) {
					z.Fields = (z.Fields)[:zgensym_2dd2157f23f15384_40]
				} else {
					z.Fields = make([]Field, zgensym_2dd2157f23f15384_40)
				}
				for zgensym_2dd2157f23f15384_32 := range z.Fields {
					bts, err = z.Fields[zgensym_2dd2157f23f15384_32].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss38zgensym_2dd2157f23f15384_39 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Struct
var unmarshalMsgFieldOrder38zgensym_2dd2157f23f15384_39 = []string{"StructName__str", "Fields__slc"}

var unmarshalMsgFieldSkip38zgensym_2dd2157f23f15384_39 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Struct) Msgsize() (s int) {
	s = 1 + 16 + msgp.StringPrefixSize + len(z.StructName) + 12 + msgp.ArrayHeaderSize
	for zgensym_2dd2157f23f15384_32 := range z.Fields {
		s += z.Fields[zgensym_2dd2157f23f15384_32].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Zkind) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_2dd2157f23f15384_41 uint64
		zgensym_2dd2157f23f15384_41, err = dc.ReadUint64()
		(*z) = Zkind(zgensym_2dd2157f23f15384_41)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Zkind) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteUint64(uint64(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Zkind) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint64(o, uint64(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Zkind) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Zkind) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_2dd2157f23f15384_42 uint64
		zgensym_2dd2157f23f15384_42, bts, err = nbs.ReadUint64Bytes(bts)

		if err != nil {
			return
		}
		(*z) = Zkind(zgensym_2dd2157f23f15384_42)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Zkind) Msgsize() (s int) {
	s = msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Ztype) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields43zgensym_2dd2157f23f15384_44 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields43zgensym_2dd2157f23f15384_44 uint32
	totalEncodedFields43zgensym_2dd2157f23f15384_44, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft43zgensym_2dd2157f23f15384_44 := totalEncodedFields43zgensym_2dd2157f23f15384_44
	missingFieldsLeft43zgensym_2dd2157f23f15384_44 := maxFields43zgensym_2dd2157f23f15384_44 - totalEncodedFields43zgensym_2dd2157f23f15384_44

	var nextMiss43zgensym_2dd2157f23f15384_44 int32 = -1
	var found43zgensym_2dd2157f23f15384_44 [maxFields43zgensym_2dd2157f23f15384_44]bool
	var curField43zgensym_2dd2157f23f15384_44 string

doneWithStruct43zgensym_2dd2157f23f15384_44:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft43zgensym_2dd2157f23f15384_44 > 0 || missingFieldsLeft43zgensym_2dd2157f23f15384_44 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft43zgensym_2dd2157f23f15384_44, missingFieldsLeft43zgensym_2dd2157f23f15384_44, msgp.ShowFound(found43zgensym_2dd2157f23f15384_44[:]), decodeMsgFieldOrder43zgensym_2dd2157f23f15384_44)
		if encodedFieldsLeft43zgensym_2dd2157f23f15384_44 > 0 {
			encodedFieldsLeft43zgensym_2dd2157f23f15384_44--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField43zgensym_2dd2157f23f15384_44 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss43zgensym_2dd2157f23f15384_44 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss43zgensym_2dd2157f23f15384_44 = 0
			}
			for nextMiss43zgensym_2dd2157f23f15384_44 < maxFields43zgensym_2dd2157f23f15384_44 && (found43zgensym_2dd2157f23f15384_44[nextMiss43zgensym_2dd2157f23f15384_44] || decodeMsgFieldSkip43zgensym_2dd2157f23f15384_44[nextMiss43zgensym_2dd2157f23f15384_44]) {
				nextMiss43zgensym_2dd2157f23f15384_44++
			}
			if nextMiss43zgensym_2dd2157f23f15384_44 == maxFields43zgensym_2dd2157f23f15384_44 {
				// filled all the empty fields!
				break doneWithStruct43zgensym_2dd2157f23f15384_44
			}
			missingFieldsLeft43zgensym_2dd2157f23f15384_44--
			curField43zgensym_2dd2157f23f15384_44 = decodeMsgFieldOrder43zgensym_2dd2157f23f15384_44[nextMiss43zgensym_2dd2157f23f15384_44]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField43zgensym_2dd2157f23f15384_44)
		switch curField43zgensym_2dd2157f23f15384_44 {
		// -- templateDecodeMsg ends here --

		case "Kind__rct":
			found43zgensym_2dd2157f23f15384_44[0] = true
			{
				var zgensym_2dd2157f23f15384_45 uint64
				zgensym_2dd2157f23f15384_45, err = dc.ReadUint64()
				z.Kind = Zkind(zgensym_2dd2157f23f15384_45)
			}
			if err != nil {
				return
			}
		case "Str__str":
			found43zgensym_2dd2157f23f15384_44[1] = true
			z.Str, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Domain__ptr":
			found43zgensym_2dd2157f23f15384_44[2] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Domain != nil {
					dc.PushAlwaysNil()
					err = z.Domain.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Domain == nil {
					z.Domain = new(Ztype)
				}
				dc.DedupIndexEachPtr(z.Domain)

				err = z.Domain.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Range__ptr":
			found43zgensym_2dd2157f23f15384_44[3] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Range != nil {
					dc.PushAlwaysNil()
					err = z.Range.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Range == nil {
					z.Range = new(Ztype)
				}
				dc.DedupIndexEachPtr(z.Range)

				err = z.Range.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss43zgensym_2dd2157f23f15384_44 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Ztype
var decodeMsgFieldOrder43zgensym_2dd2157f23f15384_44 = []string{"Kind__rct", "Str__str", "Domain__ptr", "Range__ptr"}

var decodeMsgFieldSkip43zgensym_2dd2157f23f15384_44 = []bool{false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Ztype) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (z.Kind == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Str) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Domain == nil) // pointer, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.Range == nil) // pointer, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Ztype) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_2dd2157f23f15384_46 [4]bool
	fieldsInUse_zgensym_2dd2157f23f15384_47 := z.fieldsNotEmpty(empty_zgensym_2dd2157f23f15384_46[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_2dd2157f23f15384_47 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Ztype'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x5a, 0x74, 0x79, 0x70, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_2dd2157f23f15384_46[0] {
		// write "Kind__rct"
		err = en.Append(0xa9, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteUint64(uint64(z.Kind))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_46[1] {
		// write "Str__str"
		err = en.Append(0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Str)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_2dd2157f23f15384_46[2] {
		// write "Domain__ptr"
		err = en.Append(0xab, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Domain == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Domain.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_2dd2157f23f15384_46[3] {
		// write "Range__ptr"
		err = en.Append(0xaa, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Range == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Range.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Ztype) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Kind__rct"
		o = append(o, 0xa9, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendUint64(o, uint64(z.Kind))
	}

	if !empty[1] {
		// string "Str__str"
		o = append(o, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Str)
	}

	if !empty[2] {
		// string "Domain__ptr"
		o = append(o, 0xab, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Domain == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Domain.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[3] {
		// string "Range__ptr"
		o = append(o, 0xaa, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Range == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Range.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Ztype) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Ztype) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields48zgensym_2dd2157f23f15384_49 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields48zgensym_2dd2157f23f15384_49 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields48zgensym_2dd2157f23f15384_49, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft48zgensym_2dd2157f23f15384_49 := totalEncodedFields48zgensym_2dd2157f23f15384_49
	missingFieldsLeft48zgensym_2dd2157f23f15384_49 := maxFields48zgensym_2dd2157f23f15384_49 - totalEncodedFields48zgensym_2dd2157f23f15384_49

	var nextMiss48zgensym_2dd2157f23f15384_49 int32 = -1
	var found48zgensym_2dd2157f23f15384_49 [maxFields48zgensym_2dd2157f23f15384_49]bool
	var curField48zgensym_2dd2157f23f15384_49 string

doneWithStruct48zgensym_2dd2157f23f15384_49:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft48zgensym_2dd2157f23f15384_49 > 0 || missingFieldsLeft48zgensym_2dd2157f23f15384_49 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft48zgensym_2dd2157f23f15384_49, missingFieldsLeft48zgensym_2dd2157f23f15384_49, msgp.ShowFound(found48zgensym_2dd2157f23f15384_49[:]), unmarshalMsgFieldOrder48zgensym_2dd2157f23f15384_49)
		if encodedFieldsLeft48zgensym_2dd2157f23f15384_49 > 0 {
			encodedFieldsLeft48zgensym_2dd2157f23f15384_49--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField48zgensym_2dd2157f23f15384_49 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss48zgensym_2dd2157f23f15384_49 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss48zgensym_2dd2157f23f15384_49 = 0
			}
			for nextMiss48zgensym_2dd2157f23f15384_49 < maxFields48zgensym_2dd2157f23f15384_49 && (found48zgensym_2dd2157f23f15384_49[nextMiss48zgensym_2dd2157f23f15384_49] || unmarshalMsgFieldSkip48zgensym_2dd2157f23f15384_49[nextMiss48zgensym_2dd2157f23f15384_49]) {
				nextMiss48zgensym_2dd2157f23f15384_49++
			}
			if nextMiss48zgensym_2dd2157f23f15384_49 == maxFields48zgensym_2dd2157f23f15384_49 {
				// filled all the empty fields!
				break doneWithStruct48zgensym_2dd2157f23f15384_49
			}
			missingFieldsLeft48zgensym_2dd2157f23f15384_49--
			curField48zgensym_2dd2157f23f15384_49 = unmarshalMsgFieldOrder48zgensym_2dd2157f23f15384_49[nextMiss48zgensym_2dd2157f23f15384_49]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField48zgensym_2dd2157f23f15384_49)
		switch curField48zgensym_2dd2157f23f15384_49 {
		// -- templateUnmarshalMsg ends here --

		case "Kind__rct":
			found48zgensym_2dd2157f23f15384_49[0] = true
			{
				var zgensym_2dd2157f23f15384_50 uint64
				zgensym_2dd2157f23f15384_50, bts, err = nbs.ReadUint64Bytes(bts)

				if err != nil {
					return
				}
				z.Kind = Zkind(zgensym_2dd2157f23f15384_50)
			}
		case "Str__str":
			found48zgensym_2dd2157f23f15384_49[1] = true
			z.Str, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Domain__ptr":
			found48zgensym_2dd2157f23f15384_49[2] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Domain != nil {
					z.Domain.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Domain {
						z.Domain.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Domain == nil {
						z.Domain = new(Ztype)
					}

					bts, err = z.Domain.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Range__ptr":
			found48zgensym_2dd2157f23f15384_49[3] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Range != nil {
					z.Range.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Range {
						z.Range.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Range == nil {
						z.Range = new(Ztype)
					}

					bts, err = z.Range.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss48zgensym_2dd2157f23f15384_49 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Ztype
var unmarshalMsgFieldOrder48zgensym_2dd2157f23f15384_49 = []string{"Kind__rct", "Str__str", "Domain__ptr", "Range__ptr"}

var unmarshalMsgFieldSkip48zgensym_2dd2157f23f15384_49 = []bool{false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Ztype) Msgsize() (s int) {
	s = 1 + 10 + msgp.Uint64Size + 9 + msgp.StringPrefixSize + len(z.Str) + 12
	if z.Domain == nil {
		s += msgp.NilSize
	} else {
		s += z.Domain.Msgsize()
	}
	s += 11
	if z.Range == nil {
		s += msgp.NilSize
	} else {
		s += z.Range.Msgsize()
	}
	return
}
