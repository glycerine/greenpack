// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package _generated

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Greeter2) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_29db2bb3a798cb07_1 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_29db2bb3a798cb07_1 uint32
	totalEncodedFields0zgensym_29db2bb3a798cb07_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_29db2bb3a798cb07_1 := totalEncodedFields0zgensym_29db2bb3a798cb07_1
	missingFieldsLeft0zgensym_29db2bb3a798cb07_1 := maxFields0zgensym_29db2bb3a798cb07_1 - totalEncodedFields0zgensym_29db2bb3a798cb07_1

	var nextMiss0zgensym_29db2bb3a798cb07_1 int32 = -1
	var found0zgensym_29db2bb3a798cb07_1 [maxFields0zgensym_29db2bb3a798cb07_1]bool
	var curField0zgensym_29db2bb3a798cb07_1 string

doneWithStruct0zgensym_29db2bb3a798cb07_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_29db2bb3a798cb07_1 > 0 || missingFieldsLeft0zgensym_29db2bb3a798cb07_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft0zgensym_29db2bb3a798cb07_1, missingFieldsLeft0zgensym_29db2bb3a798cb07_1, msgp.ShowFound(found0zgensym_29db2bb3a798cb07_1[:]), decodeMsgFieldOrder0zgensym_29db2bb3a798cb07_1)
		if encodedFieldsLeft0zgensym_29db2bb3a798cb07_1 > 0 {
			encodedFieldsLeft0zgensym_29db2bb3a798cb07_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_29db2bb3a798cb07_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_29db2bb3a798cb07_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_29db2bb3a798cb07_1 = 0
			}
			for nextMiss0zgensym_29db2bb3a798cb07_1 < maxFields0zgensym_29db2bb3a798cb07_1 && (found0zgensym_29db2bb3a798cb07_1[nextMiss0zgensym_29db2bb3a798cb07_1] || decodeMsgFieldSkip0zgensym_29db2bb3a798cb07_1[nextMiss0zgensym_29db2bb3a798cb07_1]) {
				nextMiss0zgensym_29db2bb3a798cb07_1++
			}
			if nextMiss0zgensym_29db2bb3a798cb07_1 == maxFields0zgensym_29db2bb3a798cb07_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_29db2bb3a798cb07_1
			}
			missingFieldsLeft0zgensym_29db2bb3a798cb07_1--
			curField0zgensym_29db2bb3a798cb07_1 = decodeMsgFieldOrder0zgensym_29db2bb3a798cb07_1[nextMiss0zgensym_29db2bb3a798cb07_1]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField0zgensym_29db2bb3a798cb07_1)
		switch curField0zgensym_29db2bb3a798cb07_1 {
		// -- templateDecodeMsg ends here --

		case "Style__int":
			found0zgensym_29db2bb3a798cb07_1[0] = true
			z.Style, err = dc.ReadInt()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_29db2bb3a798cb07_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Greeter2
var decodeMsgFieldOrder0zgensym_29db2bb3a798cb07_1 = []string{"Style__int"}

var decodeMsgFieldSkip0zgensym_29db2bb3a798cb07_1 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *Greeter2) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (z.Style == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Greeter2) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_29db2bb3a798cb07_2 [1]bool
	fieldsInUse_zgensym_29db2bb3a798cb07_3 := z.fieldsNotEmpty(empty_zgensym_29db2bb3a798cb07_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_29db2bb3a798cb07_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Greeter2'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x47, 0x72, 0x65, 0x65, 0x74, 0x65, 0x72, 0x32})
	if err != nil {
		return err
	}

	if !empty_zgensym_29db2bb3a798cb07_2[0] {
		// write "Style__int"
		err = en.Append(0xaa, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Style)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Greeter2) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Style__int"
		o = append(o, 0xaa, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Style)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Greeter2) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Greeter2) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_29db2bb3a798cb07_5 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_29db2bb3a798cb07_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_29db2bb3a798cb07_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_29db2bb3a798cb07_5 := totalEncodedFields4zgensym_29db2bb3a798cb07_5
	missingFieldsLeft4zgensym_29db2bb3a798cb07_5 := maxFields4zgensym_29db2bb3a798cb07_5 - totalEncodedFields4zgensym_29db2bb3a798cb07_5

	var nextMiss4zgensym_29db2bb3a798cb07_5 int32 = -1
	var found4zgensym_29db2bb3a798cb07_5 [maxFields4zgensym_29db2bb3a798cb07_5]bool
	var curField4zgensym_29db2bb3a798cb07_5 string

doneWithStruct4zgensym_29db2bb3a798cb07_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_29db2bb3a798cb07_5 > 0 || missingFieldsLeft4zgensym_29db2bb3a798cb07_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft4zgensym_29db2bb3a798cb07_5, missingFieldsLeft4zgensym_29db2bb3a798cb07_5, msgp.ShowFound(found4zgensym_29db2bb3a798cb07_5[:]), unmarshalMsgFieldOrder4zgensym_29db2bb3a798cb07_5)
		if encodedFieldsLeft4zgensym_29db2bb3a798cb07_5 > 0 {
			encodedFieldsLeft4zgensym_29db2bb3a798cb07_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_29db2bb3a798cb07_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_29db2bb3a798cb07_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_29db2bb3a798cb07_5 = 0
			}
			for nextMiss4zgensym_29db2bb3a798cb07_5 < maxFields4zgensym_29db2bb3a798cb07_5 && (found4zgensym_29db2bb3a798cb07_5[nextMiss4zgensym_29db2bb3a798cb07_5] || unmarshalMsgFieldSkip4zgensym_29db2bb3a798cb07_5[nextMiss4zgensym_29db2bb3a798cb07_5]) {
				nextMiss4zgensym_29db2bb3a798cb07_5++
			}
			if nextMiss4zgensym_29db2bb3a798cb07_5 == maxFields4zgensym_29db2bb3a798cb07_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_29db2bb3a798cb07_5
			}
			missingFieldsLeft4zgensym_29db2bb3a798cb07_5--
			curField4zgensym_29db2bb3a798cb07_5 = unmarshalMsgFieldOrder4zgensym_29db2bb3a798cb07_5[nextMiss4zgensym_29db2bb3a798cb07_5]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField4zgensym_29db2bb3a798cb07_5)
		switch curField4zgensym_29db2bb3a798cb07_5 {
		// -- templateUnmarshalMsg ends here --

		case "Style__int":
			found4zgensym_29db2bb3a798cb07_5[0] = true
			z.Style, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_29db2bb3a798cb07_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Greeter2
var unmarshalMsgFieldOrder4zgensym_29db2bb3a798cb07_5 = []string{"Style__int"}

var unmarshalMsgFieldSkip4zgensym_29db2bb3a798cb07_5 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Greeter2) Msgsize() (s int) {
	s = 1 + 11 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Inner2) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_29db2bb3a798cb07_7 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_29db2bb3a798cb07_7 uint32
	totalEncodedFields6zgensym_29db2bb3a798cb07_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_29db2bb3a798cb07_7 := totalEncodedFields6zgensym_29db2bb3a798cb07_7
	missingFieldsLeft6zgensym_29db2bb3a798cb07_7 := maxFields6zgensym_29db2bb3a798cb07_7 - totalEncodedFields6zgensym_29db2bb3a798cb07_7

	var nextMiss6zgensym_29db2bb3a798cb07_7 int32 = -1
	var found6zgensym_29db2bb3a798cb07_7 [maxFields6zgensym_29db2bb3a798cb07_7]bool
	var curField6zgensym_29db2bb3a798cb07_7 string

doneWithStruct6zgensym_29db2bb3a798cb07_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_29db2bb3a798cb07_7 > 0 || missingFieldsLeft6zgensym_29db2bb3a798cb07_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft6zgensym_29db2bb3a798cb07_7, missingFieldsLeft6zgensym_29db2bb3a798cb07_7, msgp.ShowFound(found6zgensym_29db2bb3a798cb07_7[:]), decodeMsgFieldOrder6zgensym_29db2bb3a798cb07_7)
		if encodedFieldsLeft6zgensym_29db2bb3a798cb07_7 > 0 {
			encodedFieldsLeft6zgensym_29db2bb3a798cb07_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_29db2bb3a798cb07_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_29db2bb3a798cb07_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_29db2bb3a798cb07_7 = 0
			}
			for nextMiss6zgensym_29db2bb3a798cb07_7 < maxFields6zgensym_29db2bb3a798cb07_7 && (found6zgensym_29db2bb3a798cb07_7[nextMiss6zgensym_29db2bb3a798cb07_7] || decodeMsgFieldSkip6zgensym_29db2bb3a798cb07_7[nextMiss6zgensym_29db2bb3a798cb07_7]) {
				nextMiss6zgensym_29db2bb3a798cb07_7++
			}
			if nextMiss6zgensym_29db2bb3a798cb07_7 == maxFields6zgensym_29db2bb3a798cb07_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_29db2bb3a798cb07_7
			}
			missingFieldsLeft6zgensym_29db2bb3a798cb07_7--
			curField6zgensym_29db2bb3a798cb07_7 = decodeMsgFieldOrder6zgensym_29db2bb3a798cb07_7[nextMiss6zgensym_29db2bb3a798cb07_7]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField6zgensym_29db2bb3a798cb07_7)
		switch curField6zgensym_29db2bb3a798cb07_7 {
		// -- templateDecodeMsg ends here --

		case "Bubbles__int":
			found6zgensym_29db2bb3a798cb07_7[0] = true
			z.Bubbles, err = dc.ReadInt()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_29db2bb3a798cb07_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Inner2
var decodeMsgFieldOrder6zgensym_29db2bb3a798cb07_7 = []string{"Bubbles__int"}

var decodeMsgFieldSkip6zgensym_29db2bb3a798cb07_7 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *Inner2) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (z.Bubbles == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Inner2) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_29db2bb3a798cb07_8 [1]bool
	fieldsInUse_zgensym_29db2bb3a798cb07_9 := z.fieldsNotEmpty(empty_zgensym_29db2bb3a798cb07_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_29db2bb3a798cb07_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Inner2'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x49, 0x6e, 0x6e, 0x65, 0x72, 0x32})
	if err != nil {
		return err
	}

	if !empty_zgensym_29db2bb3a798cb07_8[0] {
		// write "Bubbles__int"
		err = en.Append(0xac, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Bubbles)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Inner2) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Bubbles__int"
		o = append(o, 0xac, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Bubbles)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Inner2) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Inner2) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields10zgensym_29db2bb3a798cb07_11 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields10zgensym_29db2bb3a798cb07_11 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields10zgensym_29db2bb3a798cb07_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft10zgensym_29db2bb3a798cb07_11 := totalEncodedFields10zgensym_29db2bb3a798cb07_11
	missingFieldsLeft10zgensym_29db2bb3a798cb07_11 := maxFields10zgensym_29db2bb3a798cb07_11 - totalEncodedFields10zgensym_29db2bb3a798cb07_11

	var nextMiss10zgensym_29db2bb3a798cb07_11 int32 = -1
	var found10zgensym_29db2bb3a798cb07_11 [maxFields10zgensym_29db2bb3a798cb07_11]bool
	var curField10zgensym_29db2bb3a798cb07_11 string

doneWithStruct10zgensym_29db2bb3a798cb07_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_29db2bb3a798cb07_11 > 0 || missingFieldsLeft10zgensym_29db2bb3a798cb07_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft10zgensym_29db2bb3a798cb07_11, missingFieldsLeft10zgensym_29db2bb3a798cb07_11, msgp.ShowFound(found10zgensym_29db2bb3a798cb07_11[:]), unmarshalMsgFieldOrder10zgensym_29db2bb3a798cb07_11)
		if encodedFieldsLeft10zgensym_29db2bb3a798cb07_11 > 0 {
			encodedFieldsLeft10zgensym_29db2bb3a798cb07_11--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField10zgensym_29db2bb3a798cb07_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_29db2bb3a798cb07_11 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss10zgensym_29db2bb3a798cb07_11 = 0
			}
			for nextMiss10zgensym_29db2bb3a798cb07_11 < maxFields10zgensym_29db2bb3a798cb07_11 && (found10zgensym_29db2bb3a798cb07_11[nextMiss10zgensym_29db2bb3a798cb07_11] || unmarshalMsgFieldSkip10zgensym_29db2bb3a798cb07_11[nextMiss10zgensym_29db2bb3a798cb07_11]) {
				nextMiss10zgensym_29db2bb3a798cb07_11++
			}
			if nextMiss10zgensym_29db2bb3a798cb07_11 == maxFields10zgensym_29db2bb3a798cb07_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_29db2bb3a798cb07_11
			}
			missingFieldsLeft10zgensym_29db2bb3a798cb07_11--
			curField10zgensym_29db2bb3a798cb07_11 = unmarshalMsgFieldOrder10zgensym_29db2bb3a798cb07_11[nextMiss10zgensym_29db2bb3a798cb07_11]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField10zgensym_29db2bb3a798cb07_11)
		switch curField10zgensym_29db2bb3a798cb07_11 {
		// -- templateUnmarshalMsg ends here --

		case "Bubbles__int":
			found10zgensym_29db2bb3a798cb07_11[0] = true
			z.Bubbles, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_29db2bb3a798cb07_11 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Inner2
var unmarshalMsgFieldOrder10zgensym_29db2bb3a798cb07_11 = []string{"Bubbles__int"}

var unmarshalMsgFieldSkip10zgensym_29db2bb3a798cb07_11 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Inner2) Msgsize() (s int) {
	s = 1 + 13 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Middle2) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields13zgensym_29db2bb3a798cb07_14 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields13zgensym_29db2bb3a798cb07_14 uint32
	totalEncodedFields13zgensym_29db2bb3a798cb07_14, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft13zgensym_29db2bb3a798cb07_14 := totalEncodedFields13zgensym_29db2bb3a798cb07_14
	missingFieldsLeft13zgensym_29db2bb3a798cb07_14 := maxFields13zgensym_29db2bb3a798cb07_14 - totalEncodedFields13zgensym_29db2bb3a798cb07_14

	var nextMiss13zgensym_29db2bb3a798cb07_14 int32 = -1
	var found13zgensym_29db2bb3a798cb07_14 [maxFields13zgensym_29db2bb3a798cb07_14]bool
	var curField13zgensym_29db2bb3a798cb07_14 string

doneWithStruct13zgensym_29db2bb3a798cb07_14:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft13zgensym_29db2bb3a798cb07_14 > 0 || missingFieldsLeft13zgensym_29db2bb3a798cb07_14 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft13zgensym_29db2bb3a798cb07_14, missingFieldsLeft13zgensym_29db2bb3a798cb07_14, msgp.ShowFound(found13zgensym_29db2bb3a798cb07_14[:]), decodeMsgFieldOrder13zgensym_29db2bb3a798cb07_14)
		if encodedFieldsLeft13zgensym_29db2bb3a798cb07_14 > 0 {
			encodedFieldsLeft13zgensym_29db2bb3a798cb07_14--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField13zgensym_29db2bb3a798cb07_14 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss13zgensym_29db2bb3a798cb07_14 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss13zgensym_29db2bb3a798cb07_14 = 0
			}
			for nextMiss13zgensym_29db2bb3a798cb07_14 < maxFields13zgensym_29db2bb3a798cb07_14 && (found13zgensym_29db2bb3a798cb07_14[nextMiss13zgensym_29db2bb3a798cb07_14] || decodeMsgFieldSkip13zgensym_29db2bb3a798cb07_14[nextMiss13zgensym_29db2bb3a798cb07_14]) {
				nextMiss13zgensym_29db2bb3a798cb07_14++
			}
			if nextMiss13zgensym_29db2bb3a798cb07_14 == maxFields13zgensym_29db2bb3a798cb07_14 {
				// filled all the empty fields!
				break doneWithStruct13zgensym_29db2bb3a798cb07_14
			}
			missingFieldsLeft13zgensym_29db2bb3a798cb07_14--
			curField13zgensym_29db2bb3a798cb07_14 = decodeMsgFieldOrder13zgensym_29db2bb3a798cb07_14[nextMiss13zgensym_29db2bb3a798cb07_14]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField13zgensym_29db2bb3a798cb07_14)
		switch curField13zgensym_29db2bb3a798cb07_14 {
		// -- templateDecodeMsg ends here --

		case "Children__slc":
			found13zgensym_29db2bb3a798cb07_14[0] = true
			var zgensym_29db2bb3a798cb07_15 uint32
			zgensym_29db2bb3a798cb07_15, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Children) >= int(zgensym_29db2bb3a798cb07_15) {
				z.Children = (z.Children)[:zgensym_29db2bb3a798cb07_15]
			} else {
				z.Children = make([]Shouter2, zgensym_29db2bb3a798cb07_15)
			}
			// NB: we have a slice of interfaces, so we need to
			//  fill target with the concrete implementation
			for zgensym_29db2bb3a798cb07_12 := range z.Children {

				concreteName_zgensym_29db2bb3a798cb07_17 := dc.NextStructName()
				target_zgensym_29db2bb3a798cb07_16 := z.Children[zgensym_29db2bb3a798cb07_12]
				if concreteName_zgensym_29db2bb3a798cb07_17 != "" {
					if cfac_zgensym_29db2bb3a798cb07_18, cfac_zgensym_29db2bb3a798cb07_18_OK := interface{}(z).(msgp.ConcreteFactory); cfac_zgensym_29db2bb3a798cb07_18_OK {
						target_zgensym_29db2bb3a798cb07_16 = cfac_zgensym_29db2bb3a798cb07_18.NewValueAsInterface(-1, concreteName_zgensym_29db2bb3a798cb07_17).(Shouter2)
					}

					err = target_zgensym_29db2bb3a798cb07_16.DecodeMsg(dc)
					if err != nil {
						return
					}

					z.Children[zgensym_29db2bb3a798cb07_12] = target_zgensym_29db2bb3a798cb07_16
					continue
				}

				err = z.Children[zgensym_29db2bb3a798cb07_12].DecodeMsg(dc) // from decodeRangeBlock in spec.go:511. IsInInterfaceSlice: true
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss13zgensym_29db2bb3a798cb07_14 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Middle2
var decodeMsgFieldOrder13zgensym_29db2bb3a798cb07_14 = []string{"Children__slc"}

var decodeMsgFieldSkip13zgensym_29db2bb3a798cb07_14 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *Middle2) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (len(z.Children) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Middle2) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_29db2bb3a798cb07_19 [1]bool
	fieldsInUse_zgensym_29db2bb3a798cb07_20 := z.fieldsNotEmpty(empty_zgensym_29db2bb3a798cb07_19[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_29db2bb3a798cb07_20 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Middle2'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x32})
	if err != nil {
		return err
	}

	if !empty_zgensym_29db2bb3a798cb07_19[0] {
		// write "Children__slc"
		err = en.Append(0xad, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Children)))
		if err != nil {
			return
		}
		for zgensym_29db2bb3a798cb07_12 := range z.Children {
			err = en.WriteIntf(z.Children[zgensym_29db2bb3a798cb07_12])
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Middle2) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Children__slc"
		o = append(o, 0xad, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Children)))
		for zgensym_29db2bb3a798cb07_12 := range z.Children {
			o, err = msgp.AppendIntf(o, z.Children[zgensym_29db2bb3a798cb07_12]) // is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Middle2) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Middle2) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields21zgensym_29db2bb3a798cb07_22 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields21zgensym_29db2bb3a798cb07_22 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields21zgensym_29db2bb3a798cb07_22, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft21zgensym_29db2bb3a798cb07_22 := totalEncodedFields21zgensym_29db2bb3a798cb07_22
	missingFieldsLeft21zgensym_29db2bb3a798cb07_22 := maxFields21zgensym_29db2bb3a798cb07_22 - totalEncodedFields21zgensym_29db2bb3a798cb07_22

	var nextMiss21zgensym_29db2bb3a798cb07_22 int32 = -1
	var found21zgensym_29db2bb3a798cb07_22 [maxFields21zgensym_29db2bb3a798cb07_22]bool
	var curField21zgensym_29db2bb3a798cb07_22 string

doneWithStruct21zgensym_29db2bb3a798cb07_22:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft21zgensym_29db2bb3a798cb07_22 > 0 || missingFieldsLeft21zgensym_29db2bb3a798cb07_22 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft21zgensym_29db2bb3a798cb07_22, missingFieldsLeft21zgensym_29db2bb3a798cb07_22, msgp.ShowFound(found21zgensym_29db2bb3a798cb07_22[:]), unmarshalMsgFieldOrder21zgensym_29db2bb3a798cb07_22)
		if encodedFieldsLeft21zgensym_29db2bb3a798cb07_22 > 0 {
			encodedFieldsLeft21zgensym_29db2bb3a798cb07_22--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField21zgensym_29db2bb3a798cb07_22 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss21zgensym_29db2bb3a798cb07_22 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss21zgensym_29db2bb3a798cb07_22 = 0
			}
			for nextMiss21zgensym_29db2bb3a798cb07_22 < maxFields21zgensym_29db2bb3a798cb07_22 && (found21zgensym_29db2bb3a798cb07_22[nextMiss21zgensym_29db2bb3a798cb07_22] || unmarshalMsgFieldSkip21zgensym_29db2bb3a798cb07_22[nextMiss21zgensym_29db2bb3a798cb07_22]) {
				nextMiss21zgensym_29db2bb3a798cb07_22++
			}
			if nextMiss21zgensym_29db2bb3a798cb07_22 == maxFields21zgensym_29db2bb3a798cb07_22 {
				// filled all the empty fields!
				break doneWithStruct21zgensym_29db2bb3a798cb07_22
			}
			missingFieldsLeft21zgensym_29db2bb3a798cb07_22--
			curField21zgensym_29db2bb3a798cb07_22 = unmarshalMsgFieldOrder21zgensym_29db2bb3a798cb07_22[nextMiss21zgensym_29db2bb3a798cb07_22]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField21zgensym_29db2bb3a798cb07_22)
		switch curField21zgensym_29db2bb3a798cb07_22 {
		// -- templateUnmarshalMsg ends here --

		case "Children__slc":
			found21zgensym_29db2bb3a798cb07_22[0] = true
			if nbs.AlwaysNil {
				(z.Children) = (z.Children)[:0]
			} else {

				var zgensym_29db2bb3a798cb07_23 uint32
				zgensym_29db2bb3a798cb07_23, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Children) >= int(zgensym_29db2bb3a798cb07_23) {
					z.Children = (z.Children)[:zgensym_29db2bb3a798cb07_23]
				} else {
					z.Children = make([]Shouter2, zgensym_29db2bb3a798cb07_23)
				}
				// NB: we have a slice of interfaces, so we need to
				//  fill target with the concrete implementation
				for zgensym_29db2bb3a798cb07_12 := range z.Children {

					var concreteName_zgensym_29db2bb3a798cb07_25 string
					concreteName_zgensym_29db2bb3a798cb07_25, bts = nbs.NextStructName(bts)
					target_zgensym_29db2bb3a798cb07_24 := z.Children[zgensym_29db2bb3a798cb07_12]
					if concreteName_zgensym_29db2bb3a798cb07_25 != "" {
						if cfac_zgensym_29db2bb3a798cb07_26, cfac_zgensym_29db2bb3a798cb07_26_OK := interface{}(z).(msgp.ConcreteFactory); cfac_zgensym_29db2bb3a798cb07_26_OK {
							target_zgensym_29db2bb3a798cb07_24 = cfac_zgensym_29db2bb3a798cb07_26.NewValueAsInterface(-1, concreteName_zgensym_29db2bb3a798cb07_25).(Shouter2)
						}
						bts, err = target_zgensym_29db2bb3a798cb07_24.UnmarshalMsg(bts)
						if err != nil {
							return
						}

						z.Children[zgensym_29db2bb3a798cb07_12] = target_zgensym_29db2bb3a798cb07_24
						continue
					}

					bts, err = z.Children[zgensym_29db2bb3a798cb07_12].UnmarshalMsg(bts) // from unmarshalRangeBlock in spec.go:486. IsInInterfaceSlice: true
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss21zgensym_29db2bb3a798cb07_22 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Middle2
var unmarshalMsgFieldOrder21zgensym_29db2bb3a798cb07_22 = []string{"Children__slc"}

var unmarshalMsgFieldSkip21zgensym_29db2bb3a798cb07_22 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Middle2) Msgsize() (s int) {
	s = 1 + 14 + msgp.ArrayHeaderSize
	for zgensym_29db2bb3a798cb07_12 := range z.Children {
		s += msgp.GuessSize(z.Children[zgensym_29db2bb3a798cb07_12])
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *NoDedup) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields29zgensym_29db2bb3a798cb07_30 = 6

	// -- templateDecodeMsg starts here--
	var totalEncodedFields29zgensym_29db2bb3a798cb07_30 uint32
	totalEncodedFields29zgensym_29db2bb3a798cb07_30, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft29zgensym_29db2bb3a798cb07_30 := totalEncodedFields29zgensym_29db2bb3a798cb07_30
	missingFieldsLeft29zgensym_29db2bb3a798cb07_30 := maxFields29zgensym_29db2bb3a798cb07_30 - totalEncodedFields29zgensym_29db2bb3a798cb07_30

	var nextMiss29zgensym_29db2bb3a798cb07_30 int32 = -1
	var found29zgensym_29db2bb3a798cb07_30 [maxFields29zgensym_29db2bb3a798cb07_30]bool
	var curField29zgensym_29db2bb3a798cb07_30 string

doneWithStruct29zgensym_29db2bb3a798cb07_30:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft29zgensym_29db2bb3a798cb07_30 > 0 || missingFieldsLeft29zgensym_29db2bb3a798cb07_30 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft29zgensym_29db2bb3a798cb07_30, missingFieldsLeft29zgensym_29db2bb3a798cb07_30, msgp.ShowFound(found29zgensym_29db2bb3a798cb07_30[:]), decodeMsgFieldOrder29zgensym_29db2bb3a798cb07_30)
		if encodedFieldsLeft29zgensym_29db2bb3a798cb07_30 > 0 {
			encodedFieldsLeft29zgensym_29db2bb3a798cb07_30--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField29zgensym_29db2bb3a798cb07_30 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss29zgensym_29db2bb3a798cb07_30 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss29zgensym_29db2bb3a798cb07_30 = 0
			}
			for nextMiss29zgensym_29db2bb3a798cb07_30 < maxFields29zgensym_29db2bb3a798cb07_30 && (found29zgensym_29db2bb3a798cb07_30[nextMiss29zgensym_29db2bb3a798cb07_30] || decodeMsgFieldSkip29zgensym_29db2bb3a798cb07_30[nextMiss29zgensym_29db2bb3a798cb07_30]) {
				nextMiss29zgensym_29db2bb3a798cb07_30++
			}
			if nextMiss29zgensym_29db2bb3a798cb07_30 == maxFields29zgensym_29db2bb3a798cb07_30 {
				// filled all the empty fields!
				break doneWithStruct29zgensym_29db2bb3a798cb07_30
			}
			missingFieldsLeft29zgensym_29db2bb3a798cb07_30--
			curField29zgensym_29db2bb3a798cb07_30 = decodeMsgFieldOrder29zgensym_29db2bb3a798cb07_30[nextMiss29zgensym_29db2bb3a798cb07_30]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField29zgensym_29db2bb3a798cb07_30)
		switch curField29zgensym_29db2bb3a798cb07_30 {
		// -- templateDecodeMsg ends here --

		case "MyPtr0__ptr":
			found29zgensym_29db2bb3a798cb07_30[0] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				z.MyPtr0 = nil
			} else {
				if z.MyPtr0 == nil {
					z.MyPtr0 = new(Target2)
				}
				dc.DedupIndexEachPtr(z.MyPtr0)

				const maxFields31zgensym_29db2bb3a798cb07_32 = 1

				// -- templateDecodeMsg starts here--
				var totalEncodedFields31zgensym_29db2bb3a798cb07_32 uint32
				totalEncodedFields31zgensym_29db2bb3a798cb07_32, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				encodedFieldsLeft31zgensym_29db2bb3a798cb07_32 := totalEncodedFields31zgensym_29db2bb3a798cb07_32
				missingFieldsLeft31zgensym_29db2bb3a798cb07_32 := maxFields31zgensym_29db2bb3a798cb07_32 - totalEncodedFields31zgensym_29db2bb3a798cb07_32

				var nextMiss31zgensym_29db2bb3a798cb07_32 int32 = -1
				var found31zgensym_29db2bb3a798cb07_32 [maxFields31zgensym_29db2bb3a798cb07_32]bool
				var curField31zgensym_29db2bb3a798cb07_32 string

			doneWithStruct31zgensym_29db2bb3a798cb07_32:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft31zgensym_29db2bb3a798cb07_32 > 0 || missingFieldsLeft31zgensym_29db2bb3a798cb07_32 > 0 {
					//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft31zgensym_29db2bb3a798cb07_32, missingFieldsLeft31zgensym_29db2bb3a798cb07_32, msgp.ShowFound(found31zgensym_29db2bb3a798cb07_32[:]), decodeMsgFieldOrder31zgensym_29db2bb3a798cb07_32)
					if encodedFieldsLeft31zgensym_29db2bb3a798cb07_32 > 0 {
						encodedFieldsLeft31zgensym_29db2bb3a798cb07_32--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							return
						}
						curField31zgensym_29db2bb3a798cb07_32 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss31zgensym_29db2bb3a798cb07_32 < 0 {
							// tell the reader to only give us Nils
							// until further notice.
							dc.PushAlwaysNil()
							nextMiss31zgensym_29db2bb3a798cb07_32 = 0
						}
						for nextMiss31zgensym_29db2bb3a798cb07_32 < maxFields31zgensym_29db2bb3a798cb07_32 && (found31zgensym_29db2bb3a798cb07_32[nextMiss31zgensym_29db2bb3a798cb07_32] || decodeMsgFieldSkip31zgensym_29db2bb3a798cb07_32[nextMiss31zgensym_29db2bb3a798cb07_32]) {
							nextMiss31zgensym_29db2bb3a798cb07_32++
						}
						if nextMiss31zgensym_29db2bb3a798cb07_32 == maxFields31zgensym_29db2bb3a798cb07_32 {
							// filled all the empty fields!
							break doneWithStruct31zgensym_29db2bb3a798cb07_32
						}
						missingFieldsLeft31zgensym_29db2bb3a798cb07_32--
						curField31zgensym_29db2bb3a798cb07_32 = decodeMsgFieldOrder31zgensym_29db2bb3a798cb07_32[nextMiss31zgensym_29db2bb3a798cb07_32]
					}
					//fmt.Printf("switching on curField: '%%v'\n", curField31zgensym_29db2bb3a798cb07_32)
					switch curField31zgensym_29db2bb3a798cb07_32 {
					// -- templateDecodeMsg ends here --

					case "ID__int":
						found31zgensym_29db2bb3a798cb07_32[0] = true
						z.MyPtr0.ID, err = dc.ReadInt()
						if err != nil {
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
				if nextMiss31zgensym_29db2bb3a798cb07_32 != -1 {
					dc.PopAlwaysNil()
				}

			}
		case "MyPtr1__ptr":
			found29zgensym_29db2bb3a798cb07_30[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				z.MyPtr1 = nil
			} else {
				if z.MyPtr1 == nil {
					z.MyPtr1 = new(Target2)
				}
				dc.DedupIndexEachPtr(z.MyPtr1)

				const maxFields33zgensym_29db2bb3a798cb07_34 = 1

				// -- templateDecodeMsg starts here--
				var totalEncodedFields33zgensym_29db2bb3a798cb07_34 uint32
				totalEncodedFields33zgensym_29db2bb3a798cb07_34, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				encodedFieldsLeft33zgensym_29db2bb3a798cb07_34 := totalEncodedFields33zgensym_29db2bb3a798cb07_34
				missingFieldsLeft33zgensym_29db2bb3a798cb07_34 := maxFields33zgensym_29db2bb3a798cb07_34 - totalEncodedFields33zgensym_29db2bb3a798cb07_34

				var nextMiss33zgensym_29db2bb3a798cb07_34 int32 = -1
				var found33zgensym_29db2bb3a798cb07_34 [maxFields33zgensym_29db2bb3a798cb07_34]bool
				var curField33zgensym_29db2bb3a798cb07_34 string

			doneWithStruct33zgensym_29db2bb3a798cb07_34:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft33zgensym_29db2bb3a798cb07_34 > 0 || missingFieldsLeft33zgensym_29db2bb3a798cb07_34 > 0 {
					//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft33zgensym_29db2bb3a798cb07_34, missingFieldsLeft33zgensym_29db2bb3a798cb07_34, msgp.ShowFound(found33zgensym_29db2bb3a798cb07_34[:]), decodeMsgFieldOrder33zgensym_29db2bb3a798cb07_34)
					if encodedFieldsLeft33zgensym_29db2bb3a798cb07_34 > 0 {
						encodedFieldsLeft33zgensym_29db2bb3a798cb07_34--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							return
						}
						curField33zgensym_29db2bb3a798cb07_34 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss33zgensym_29db2bb3a798cb07_34 < 0 {
							// tell the reader to only give us Nils
							// until further notice.
							dc.PushAlwaysNil()
							nextMiss33zgensym_29db2bb3a798cb07_34 = 0
						}
						for nextMiss33zgensym_29db2bb3a798cb07_34 < maxFields33zgensym_29db2bb3a798cb07_34 && (found33zgensym_29db2bb3a798cb07_34[nextMiss33zgensym_29db2bb3a798cb07_34] || decodeMsgFieldSkip33zgensym_29db2bb3a798cb07_34[nextMiss33zgensym_29db2bb3a798cb07_34]) {
							nextMiss33zgensym_29db2bb3a798cb07_34++
						}
						if nextMiss33zgensym_29db2bb3a798cb07_34 == maxFields33zgensym_29db2bb3a798cb07_34 {
							// filled all the empty fields!
							break doneWithStruct33zgensym_29db2bb3a798cb07_34
						}
						missingFieldsLeft33zgensym_29db2bb3a798cb07_34--
						curField33zgensym_29db2bb3a798cb07_34 = decodeMsgFieldOrder33zgensym_29db2bb3a798cb07_34[nextMiss33zgensym_29db2bb3a798cb07_34]
					}
					//fmt.Printf("switching on curField: '%%v'\n", curField33zgensym_29db2bb3a798cb07_34)
					switch curField33zgensym_29db2bb3a798cb07_34 {
					// -- templateDecodeMsg ends here --

					case "ID__int":
						found33zgensym_29db2bb3a798cb07_34[0] = true
						z.MyPtr1.ID, err = dc.ReadInt()
						if err != nil {
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
				if nextMiss33zgensym_29db2bb3a798cb07_34 != -1 {
					dc.PopAlwaysNil()
				}

			}
		case "MyIface0__rct":
			found29zgensym_29db2bb3a798cb07_30[2] = true
			conc_zgensym_29db2bb3a798cb07_36 := dc.NextStructName()
			if conc_zgensym_29db2bb3a798cb07_36 != "" {
				if cfac_zgensym_29db2bb3a798cb07_37, cfacOK_zgensym_29db2bb3a798cb07_37 := interface{}(z).(msgp.ConcreteFactory); cfacOK_zgensym_29db2bb3a798cb07_37 {
					targ_zgensym_29db2bb3a798cb07_35 := cfac_zgensym_29db2bb3a798cb07_37.NewValueAsInterface(-1, conc_zgensym_29db2bb3a798cb07_36).(Hello2)

					err = targ_zgensym_29db2bb3a798cb07_35.DecodeMsg(dc)
					if err != nil {
						return
					}
					z.MyIface0 = targ_zgensym_29db2bb3a798cb07_35
					continue
				}
			}
			if z.MyIface0 != nil {

				err = z.MyIface0.DecodeMsg(dc)
			}

			if err != nil {
				return
			}
		case "MyIface1__rct":
			found29zgensym_29db2bb3a798cb07_30[3] = true
			conc_zgensym_29db2bb3a798cb07_39 := dc.NextStructName()
			if conc_zgensym_29db2bb3a798cb07_39 != "" {
				if cfac_zgensym_29db2bb3a798cb07_40, cfacOK_zgensym_29db2bb3a798cb07_40 := interface{}(z).(msgp.ConcreteFactory); cfacOK_zgensym_29db2bb3a798cb07_40 {
					targ_zgensym_29db2bb3a798cb07_38 := cfac_zgensym_29db2bb3a798cb07_40.NewValueAsInterface(-1, conc_zgensym_29db2bb3a798cb07_39).(Hello2)

					err = targ_zgensym_29db2bb3a798cb07_38.DecodeMsg(dc)
					if err != nil {
						return
					}
					z.MyIface1 = targ_zgensym_29db2bb3a798cb07_38
					continue
				}
			}
			if z.MyIface1 != nil {

				err = z.MyIface1.DecodeMsg(dc)
			}

			if err != nil {
				return
			}
		case "Slice__slc":
			found29zgensym_29db2bb3a798cb07_30[4] = true
			var zgensym_29db2bb3a798cb07_41 uint32
			zgensym_29db2bb3a798cb07_41, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Slice) >= int(zgensym_29db2bb3a798cb07_41) {
				z.Slice = (z.Slice)[:zgensym_29db2bb3a798cb07_41]
			} else {
				z.Slice = make([]Hello2, zgensym_29db2bb3a798cb07_41)
			}
			// NB: we have a slice of interfaces, so we need to
			//  fill target with the concrete implementation
			for zgensym_29db2bb3a798cb07_27 := range z.Slice {

				concreteName_zgensym_29db2bb3a798cb07_43 := dc.NextStructName()
				target_zgensym_29db2bb3a798cb07_42 := z.Slice[zgensym_29db2bb3a798cb07_27]
				if concreteName_zgensym_29db2bb3a798cb07_43 != "" {
					if cfac_zgensym_29db2bb3a798cb07_44, cfac_zgensym_29db2bb3a798cb07_44_OK := interface{}(z).(msgp.ConcreteFactory); cfac_zgensym_29db2bb3a798cb07_44_OK {
						target_zgensym_29db2bb3a798cb07_42 = cfac_zgensym_29db2bb3a798cb07_44.NewValueAsInterface(-1, concreteName_zgensym_29db2bb3a798cb07_43).(Hello2)
					}

					err = target_zgensym_29db2bb3a798cb07_42.DecodeMsg(dc)
					if err != nil {
						return
					}

					z.Slice[zgensym_29db2bb3a798cb07_27] = target_zgensym_29db2bb3a798cb07_42
					continue
				}

				err = z.Slice[zgensym_29db2bb3a798cb07_27].DecodeMsg(dc) // from decodeRangeBlock in spec.go:511. IsInInterfaceSlice: true
				if err != nil {
					return
				}
			}
		case "SlicePtr__slc":
			found29zgensym_29db2bb3a798cb07_30[5] = true
			var zgensym_29db2bb3a798cb07_45 uint32
			zgensym_29db2bb3a798cb07_45, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.SlicePtr) >= int(zgensym_29db2bb3a798cb07_45) {
				z.SlicePtr = (z.SlicePtr)[:zgensym_29db2bb3a798cb07_45]
			} else {
				z.SlicePtr = make([]*Greeter2, zgensym_29db2bb3a798cb07_45)
			}
			for zgensym_29db2bb3a798cb07_28 := range z.SlicePtr {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					z.SlicePtr[zgensym_29db2bb3a798cb07_28] = nil
				} else {
					if z.SlicePtr[zgensym_29db2bb3a798cb07_28] == nil {
						z.SlicePtr[zgensym_29db2bb3a798cb07_28] = new(Greeter2)
					}
					dc.DedupIndexEachPtr(z.SlicePtr[zgensym_29db2bb3a798cb07_28])

					const maxFields46zgensym_29db2bb3a798cb07_47 = 1

					// -- templateDecodeMsg starts here--
					var totalEncodedFields46zgensym_29db2bb3a798cb07_47 uint32
					totalEncodedFields46zgensym_29db2bb3a798cb07_47, err = dc.ReadMapHeader()
					if err != nil {
						return
					}
					encodedFieldsLeft46zgensym_29db2bb3a798cb07_47 := totalEncodedFields46zgensym_29db2bb3a798cb07_47
					missingFieldsLeft46zgensym_29db2bb3a798cb07_47 := maxFields46zgensym_29db2bb3a798cb07_47 - totalEncodedFields46zgensym_29db2bb3a798cb07_47

					var nextMiss46zgensym_29db2bb3a798cb07_47 int32 = -1
					var found46zgensym_29db2bb3a798cb07_47 [maxFields46zgensym_29db2bb3a798cb07_47]bool
					var curField46zgensym_29db2bb3a798cb07_47 string

				doneWithStruct46zgensym_29db2bb3a798cb07_47:
					// First fill all the encoded fields, then
					// treat the remaining, missing fields, as Nil.
					for encodedFieldsLeft46zgensym_29db2bb3a798cb07_47 > 0 || missingFieldsLeft46zgensym_29db2bb3a798cb07_47 > 0 {
						//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft46zgensym_29db2bb3a798cb07_47, missingFieldsLeft46zgensym_29db2bb3a798cb07_47, msgp.ShowFound(found46zgensym_29db2bb3a798cb07_47[:]), decodeMsgFieldOrder46zgensym_29db2bb3a798cb07_47)
						if encodedFieldsLeft46zgensym_29db2bb3a798cb07_47 > 0 {
							encodedFieldsLeft46zgensym_29db2bb3a798cb07_47--
							field, err = dc.ReadMapKeyPtr()
							if err != nil {
								return
							}
							curField46zgensym_29db2bb3a798cb07_47 = msgp.UnsafeString(field)
						} else {
							//missing fields need handling
							if nextMiss46zgensym_29db2bb3a798cb07_47 < 0 {
								// tell the reader to only give us Nils
								// until further notice.
								dc.PushAlwaysNil()
								nextMiss46zgensym_29db2bb3a798cb07_47 = 0
							}
							for nextMiss46zgensym_29db2bb3a798cb07_47 < maxFields46zgensym_29db2bb3a798cb07_47 && (found46zgensym_29db2bb3a798cb07_47[nextMiss46zgensym_29db2bb3a798cb07_47] || decodeMsgFieldSkip46zgensym_29db2bb3a798cb07_47[nextMiss46zgensym_29db2bb3a798cb07_47]) {
								nextMiss46zgensym_29db2bb3a798cb07_47++
							}
							if nextMiss46zgensym_29db2bb3a798cb07_47 == maxFields46zgensym_29db2bb3a798cb07_47 {
								// filled all the empty fields!
								break doneWithStruct46zgensym_29db2bb3a798cb07_47
							}
							missingFieldsLeft46zgensym_29db2bb3a798cb07_47--
							curField46zgensym_29db2bb3a798cb07_47 = decodeMsgFieldOrder46zgensym_29db2bb3a798cb07_47[nextMiss46zgensym_29db2bb3a798cb07_47]
						}
						//fmt.Printf("switching on curField: '%%v'\n", curField46zgensym_29db2bb3a798cb07_47)
						switch curField46zgensym_29db2bb3a798cb07_47 {
						// -- templateDecodeMsg ends here --

						case "Style__int":
							found46zgensym_29db2bb3a798cb07_47[0] = true
							z.SlicePtr[zgensym_29db2bb3a798cb07_28].Style, err = dc.ReadInt()
							if err != nil {
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								return
							}
						}
					}
					if nextMiss46zgensym_29db2bb3a798cb07_47 != -1 {
						dc.PopAlwaysNil()
					}

				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss29zgensym_29db2bb3a798cb07_30 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of NoDedup
var decodeMsgFieldOrder29zgensym_29db2bb3a798cb07_30 = []string{"MyPtr0__ptr", "MyPtr1__ptr", "MyIface0__rct", "MyIface1__rct", "Slice__slc", "SlicePtr__slc"}

var decodeMsgFieldSkip29zgensym_29db2bb3a798cb07_30 = []bool{false, false, false, false, false, false}

// fields of Target2
var decodeMsgFieldOrder31zgensym_29db2bb3a798cb07_32 = []string{"ID__int"}

var decodeMsgFieldSkip31zgensym_29db2bb3a798cb07_32 = []bool{false}

// fields of Target2
var decodeMsgFieldOrder33zgensym_29db2bb3a798cb07_34 = []string{"ID__int"}

var decodeMsgFieldSkip33zgensym_29db2bb3a798cb07_34 = []bool{false}

// fields of Greeter2
var decodeMsgFieldOrder46zgensym_29db2bb3a798cb07_47 = []string{"Style__int"}

var decodeMsgFieldSkip46zgensym_29db2bb3a798cb07_47 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *NoDedup) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 6
	}
	var fieldsInUse uint32 = 6
	isempty[0] = (z.MyPtr0 == nil) // pointer, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.MyPtr1 == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.MyIface0 == nil) // interface, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.MyIface1 == nil) // interface, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.Slice) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.SlicePtr) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *NoDedup) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_29db2bb3a798cb07_48 [6]bool
	fieldsInUse_zgensym_29db2bb3a798cb07_49 := z.fieldsNotEmpty(empty_zgensym_29db2bb3a798cb07_48[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_29db2bb3a798cb07_49 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'NoDedup'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4e, 0x6f, 0x44, 0x65, 0x64, 0x75, 0x70})
	if err != nil {
		return err
	}

	if !empty_zgensym_29db2bb3a798cb07_48[0] {
		// write "MyPtr0__ptr"
		err = en.Append(0xab, 0x4d, 0x79, 0x50, 0x74, 0x72, 0x30, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.MyPtr0 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {

			// honor the omitempty tags
			var empty_zgensym_29db2bb3a798cb07_50 [1]bool
			fieldsInUse_zgensym_29db2bb3a798cb07_51 := z.MyPtr0.fieldsNotEmpty(empty_zgensym_29db2bb3a798cb07_50[:])

			// map header
			err = en.WriteMapHeader(fieldsInUse_zgensym_29db2bb3a798cb07_51 + 1)
			if err != nil {
				return err
			}

			// runtime struct type identification for 'Target2'
			err = en.Append(0xa1, 0x40)
			if err != nil {
				return err
			}
			err = en.WriteStringFromBytes([]byte{0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x32})
			if err != nil {
				return err
			}

			if !empty_zgensym_29db2bb3a798cb07_50[0] {
				// write "ID__int"
				err = en.Append(0xa7, 0x49, 0x44, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
				if err != nil {
					return err
				}
				err = en.WriteInt(z.MyPtr0.ID)
				if err != nil {
					return
				}
			}

		}
	}

	if !empty_zgensym_29db2bb3a798cb07_48[1] {
		// write "MyPtr1__ptr"
		err = en.Append(0xab, 0x4d, 0x79, 0x50, 0x74, 0x72, 0x31, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.MyPtr1 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {

			// honor the omitempty tags
			var empty_zgensym_29db2bb3a798cb07_52 [1]bool
			fieldsInUse_zgensym_29db2bb3a798cb07_53 := z.MyPtr1.fieldsNotEmpty(empty_zgensym_29db2bb3a798cb07_52[:])

			// map header
			err = en.WriteMapHeader(fieldsInUse_zgensym_29db2bb3a798cb07_53 + 1)
			if err != nil {
				return err
			}

			// runtime struct type identification for 'Target2'
			err = en.Append(0xa1, 0x40)
			if err != nil {
				return err
			}
			err = en.WriteStringFromBytes([]byte{0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x32})
			if err != nil {
				return err
			}

			if !empty_zgensym_29db2bb3a798cb07_52[0] {
				// write "ID__int"
				err = en.Append(0xa7, 0x49, 0x44, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
				if err != nil {
					return err
				}
				err = en.WriteInt(z.MyPtr1.ID)
				if err != nil {
					return
				}
			}

		}
	}

	if !empty_zgensym_29db2bb3a798cb07_48[2] {
		// write "MyIface0__rct"
		err = en.Append(0xad, 0x4d, 0x79, 0x49, 0x66, 0x61, 0x63, 0x65, 0x30, 0x5f, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteIntf(z.MyIface0)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_29db2bb3a798cb07_48[3] {
		// write "MyIface1__rct"
		err = en.Append(0xad, 0x4d, 0x79, 0x49, 0x66, 0x61, 0x63, 0x65, 0x31, 0x5f, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteIntf(z.MyIface1)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_29db2bb3a798cb07_48[4] {
		// write "Slice__slc"
		err = en.Append(0xaa, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Slice)))
		if err != nil {
			return
		}
		for zgensym_29db2bb3a798cb07_27 := range z.Slice {
			err = en.WriteIntf(z.Slice[zgensym_29db2bb3a798cb07_27])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_29db2bb3a798cb07_48[5] {
		// write "SlicePtr__slc"
		err = en.Append(0xad, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.SlicePtr)))
		if err != nil {
			return
		}
		for zgensym_29db2bb3a798cb07_28 := range z.SlicePtr {
			// gPtr.encodeGen():

			if z.SlicePtr[zgensym_29db2bb3a798cb07_28] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {

				// honor the omitempty tags
				var empty_zgensym_29db2bb3a798cb07_54 [1]bool
				fieldsInUse_zgensym_29db2bb3a798cb07_55 := z.SlicePtr[zgensym_29db2bb3a798cb07_28].fieldsNotEmpty(empty_zgensym_29db2bb3a798cb07_54[:])

				// map header
				err = en.WriteMapHeader(fieldsInUse_zgensym_29db2bb3a798cb07_55 + 1)
				if err != nil {
					return err
				}

				// runtime struct type identification for 'Greeter2'
				err = en.Append(0xa1, 0x40)
				if err != nil {
					return err
				}
				err = en.WriteStringFromBytes([]byte{0x47, 0x72, 0x65, 0x65, 0x74, 0x65, 0x72, 0x32})
				if err != nil {
					return err
				}

				if !empty_zgensym_29db2bb3a798cb07_54[0] {
					// write "Style__int"
					err = en.Append(0xaa, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
					if err != nil {
						return err
					}
					err = en.WriteInt(z.SlicePtr[zgensym_29db2bb3a798cb07_28].Style)
					if err != nil {
						return
					}
				}

			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *NoDedup) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [6]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "MyPtr0__ptr"
		o = append(o, 0xab, 0x4d, 0x79, 0x50, 0x74, 0x72, 0x30, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.MyPtr0 == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			// honor the omitempty tags
			var empty [1]bool
			fieldsInUse := z.MyPtr0.fieldsNotEmpty(empty[:])
			o = msgp.AppendMapHeader(o, fieldsInUse)

			if !empty[0] {
				// string "ID__int"
				o = append(o, 0xa7, 0x49, 0x44, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
				o = msgp.AppendInt(o, z.MyPtr0.ID)
			}

		}
	}

	if !empty[1] {
		// string "MyPtr1__ptr"
		o = append(o, 0xab, 0x4d, 0x79, 0x50, 0x74, 0x72, 0x31, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.MyPtr1 == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			// honor the omitempty tags
			var empty [1]bool
			fieldsInUse := z.MyPtr1.fieldsNotEmpty(empty[:])
			o = msgp.AppendMapHeader(o, fieldsInUse)

			if !empty[0] {
				// string "ID__int"
				o = append(o, 0xa7, 0x49, 0x44, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
				o = msgp.AppendInt(o, z.MyPtr1.ID)
			}

		}
	}

	if !empty[2] {
		// string "MyIface0__rct"
		o = append(o, 0xad, 0x4d, 0x79, 0x49, 0x66, 0x61, 0x63, 0x65, 0x30, 0x5f, 0x5f, 0x72, 0x63, 0x74)
		o, err = msgp.AppendIntf(o, z.MyIface0) // is.iface
		if err != nil {
			return
		}
	}

	if !empty[3] {
		// string "MyIface1__rct"
		o = append(o, 0xad, 0x4d, 0x79, 0x49, 0x66, 0x61, 0x63, 0x65, 0x31, 0x5f, 0x5f, 0x72, 0x63, 0x74)
		o, err = msgp.AppendIntf(o, z.MyIface1) // is.iface
		if err != nil {
			return
		}
	}

	if !empty[4] {
		// string "Slice__slc"
		o = append(o, 0xaa, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Slice)))
		for zgensym_29db2bb3a798cb07_27 := range z.Slice {
			o, err = msgp.AppendIntf(o, z.Slice[zgensym_29db2bb3a798cb07_27]) // is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[5] {
		// string "SlicePtr__slc"
		o = append(o, 0xad, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.SlicePtr)))
		for zgensym_29db2bb3a798cb07_28 := range z.SlicePtr {
			// marshalGen.gPtr()

			if z.SlicePtr[zgensym_29db2bb3a798cb07_28] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				// honor the omitempty tags
				var empty [1]bool
				fieldsInUse := z.SlicePtr[zgensym_29db2bb3a798cb07_28].fieldsNotEmpty(empty[:])
				o = msgp.AppendMapHeader(o, fieldsInUse)

				if !empty[0] {
					// string "Style__int"
					o = append(o, 0xaa, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
					o = msgp.AppendInt(o, z.SlicePtr[zgensym_29db2bb3a798cb07_28].Style)
				}

			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NoDedup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *NoDedup) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields56zgensym_29db2bb3a798cb07_57 = 6

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields56zgensym_29db2bb3a798cb07_57 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields56zgensym_29db2bb3a798cb07_57, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft56zgensym_29db2bb3a798cb07_57 := totalEncodedFields56zgensym_29db2bb3a798cb07_57
	missingFieldsLeft56zgensym_29db2bb3a798cb07_57 := maxFields56zgensym_29db2bb3a798cb07_57 - totalEncodedFields56zgensym_29db2bb3a798cb07_57

	var nextMiss56zgensym_29db2bb3a798cb07_57 int32 = -1
	var found56zgensym_29db2bb3a798cb07_57 [maxFields56zgensym_29db2bb3a798cb07_57]bool
	var curField56zgensym_29db2bb3a798cb07_57 string

doneWithStruct56zgensym_29db2bb3a798cb07_57:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft56zgensym_29db2bb3a798cb07_57 > 0 || missingFieldsLeft56zgensym_29db2bb3a798cb07_57 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft56zgensym_29db2bb3a798cb07_57, missingFieldsLeft56zgensym_29db2bb3a798cb07_57, msgp.ShowFound(found56zgensym_29db2bb3a798cb07_57[:]), unmarshalMsgFieldOrder56zgensym_29db2bb3a798cb07_57)
		if encodedFieldsLeft56zgensym_29db2bb3a798cb07_57 > 0 {
			encodedFieldsLeft56zgensym_29db2bb3a798cb07_57--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField56zgensym_29db2bb3a798cb07_57 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss56zgensym_29db2bb3a798cb07_57 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss56zgensym_29db2bb3a798cb07_57 = 0
			}
			for nextMiss56zgensym_29db2bb3a798cb07_57 < maxFields56zgensym_29db2bb3a798cb07_57 && (found56zgensym_29db2bb3a798cb07_57[nextMiss56zgensym_29db2bb3a798cb07_57] || unmarshalMsgFieldSkip56zgensym_29db2bb3a798cb07_57[nextMiss56zgensym_29db2bb3a798cb07_57]) {
				nextMiss56zgensym_29db2bb3a798cb07_57++
			}
			if nextMiss56zgensym_29db2bb3a798cb07_57 == maxFields56zgensym_29db2bb3a798cb07_57 {
				// filled all the empty fields!
				break doneWithStruct56zgensym_29db2bb3a798cb07_57
			}
			missingFieldsLeft56zgensym_29db2bb3a798cb07_57--
			curField56zgensym_29db2bb3a798cb07_57 = unmarshalMsgFieldOrder56zgensym_29db2bb3a798cb07_57[nextMiss56zgensym_29db2bb3a798cb07_57]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField56zgensym_29db2bb3a798cb07_57)
		switch curField56zgensym_29db2bb3a798cb07_57 {
		// -- templateUnmarshalMsg ends here --

		case "MyPtr0__ptr":
			found56zgensym_29db2bb3a798cb07_57[0] = true
			// default gPtr logic.
			if nbs.PeekNil(bts) && z.MyPtr0 == nil {
				// consume the nil
				bts, err = nbs.ReadNilBytes(bts)
				if err != nil {
					return
				}
			} else {
				// read as-if the wire has bytes, letting nbs take care of nils.

				if z.MyPtr0 == nil {
					z.MyPtr0 = new(Target2)
				}

				const maxFields58zgensym_29db2bb3a798cb07_59 = 1

				// -- templateUnmarshalMsg starts here--
				var totalEncodedFields58zgensym_29db2bb3a798cb07_59 uint32
				if !nbs.AlwaysNil {
					totalEncodedFields58zgensym_29db2bb3a798cb07_59, bts, err = nbs.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
				}
				encodedFieldsLeft58zgensym_29db2bb3a798cb07_59 := totalEncodedFields58zgensym_29db2bb3a798cb07_59
				missingFieldsLeft58zgensym_29db2bb3a798cb07_59 := maxFields58zgensym_29db2bb3a798cb07_59 - totalEncodedFields58zgensym_29db2bb3a798cb07_59

				var nextMiss58zgensym_29db2bb3a798cb07_59 int32 = -1
				var found58zgensym_29db2bb3a798cb07_59 [maxFields58zgensym_29db2bb3a798cb07_59]bool
				var curField58zgensym_29db2bb3a798cb07_59 string

			doneWithStruct58zgensym_29db2bb3a798cb07_59:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft58zgensym_29db2bb3a798cb07_59 > 0 || missingFieldsLeft58zgensym_29db2bb3a798cb07_59 > 0 {
					//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft58zgensym_29db2bb3a798cb07_59, missingFieldsLeft58zgensym_29db2bb3a798cb07_59, msgp.ShowFound(found58zgensym_29db2bb3a798cb07_59[:]), unmarshalMsgFieldOrder58zgensym_29db2bb3a798cb07_59)
					if encodedFieldsLeft58zgensym_29db2bb3a798cb07_59 > 0 {
						encodedFieldsLeft58zgensym_29db2bb3a798cb07_59--
						field, bts, err = nbs.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						curField58zgensym_29db2bb3a798cb07_59 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss58zgensym_29db2bb3a798cb07_59 < 0 {
							// set bts to contain just mnil (0xc0)
							bts = nbs.PushAlwaysNil(bts)
							nextMiss58zgensym_29db2bb3a798cb07_59 = 0
						}
						for nextMiss58zgensym_29db2bb3a798cb07_59 < maxFields58zgensym_29db2bb3a798cb07_59 && (found58zgensym_29db2bb3a798cb07_59[nextMiss58zgensym_29db2bb3a798cb07_59] || unmarshalMsgFieldSkip58zgensym_29db2bb3a798cb07_59[nextMiss58zgensym_29db2bb3a798cb07_59]) {
							nextMiss58zgensym_29db2bb3a798cb07_59++
						}
						if nextMiss58zgensym_29db2bb3a798cb07_59 == maxFields58zgensym_29db2bb3a798cb07_59 {
							// filled all the empty fields!
							break doneWithStruct58zgensym_29db2bb3a798cb07_59
						}
						missingFieldsLeft58zgensym_29db2bb3a798cb07_59--
						curField58zgensym_29db2bb3a798cb07_59 = unmarshalMsgFieldOrder58zgensym_29db2bb3a798cb07_59[nextMiss58zgensym_29db2bb3a798cb07_59]
					}
					//fmt.Printf("switching on curField: '%%v'\n", curField58zgensym_29db2bb3a798cb07_59)
					switch curField58zgensym_29db2bb3a798cb07_59 {
					// -- templateUnmarshalMsg ends here --

					case "ID__int":
						found58zgensym_29db2bb3a798cb07_59[0] = true
						z.MyPtr0.ID, bts, err = nbs.ReadIntBytes(bts)

						if err != nil {
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							return
						}
					}
				}
				if nextMiss58zgensym_29db2bb3a798cb07_59 != -1 {
					bts = nbs.PopAlwaysNil()
				}

			}
		case "MyPtr1__ptr":
			found56zgensym_29db2bb3a798cb07_57[1] = true
			// default gPtr logic.
			if nbs.PeekNil(bts) && z.MyPtr1 == nil {
				// consume the nil
				bts, err = nbs.ReadNilBytes(bts)
				if err != nil {
					return
				}
			} else {
				// read as-if the wire has bytes, letting nbs take care of nils.

				if z.MyPtr1 == nil {
					z.MyPtr1 = new(Target2)
				}

				const maxFields60zgensym_29db2bb3a798cb07_61 = 1

				// -- templateUnmarshalMsg starts here--
				var totalEncodedFields60zgensym_29db2bb3a798cb07_61 uint32
				if !nbs.AlwaysNil {
					totalEncodedFields60zgensym_29db2bb3a798cb07_61, bts, err = nbs.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
				}
				encodedFieldsLeft60zgensym_29db2bb3a798cb07_61 := totalEncodedFields60zgensym_29db2bb3a798cb07_61
				missingFieldsLeft60zgensym_29db2bb3a798cb07_61 := maxFields60zgensym_29db2bb3a798cb07_61 - totalEncodedFields60zgensym_29db2bb3a798cb07_61

				var nextMiss60zgensym_29db2bb3a798cb07_61 int32 = -1
				var found60zgensym_29db2bb3a798cb07_61 [maxFields60zgensym_29db2bb3a798cb07_61]bool
				var curField60zgensym_29db2bb3a798cb07_61 string

			doneWithStruct60zgensym_29db2bb3a798cb07_61:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft60zgensym_29db2bb3a798cb07_61 > 0 || missingFieldsLeft60zgensym_29db2bb3a798cb07_61 > 0 {
					//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft60zgensym_29db2bb3a798cb07_61, missingFieldsLeft60zgensym_29db2bb3a798cb07_61, msgp.ShowFound(found60zgensym_29db2bb3a798cb07_61[:]), unmarshalMsgFieldOrder60zgensym_29db2bb3a798cb07_61)
					if encodedFieldsLeft60zgensym_29db2bb3a798cb07_61 > 0 {
						encodedFieldsLeft60zgensym_29db2bb3a798cb07_61--
						field, bts, err = nbs.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						curField60zgensym_29db2bb3a798cb07_61 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss60zgensym_29db2bb3a798cb07_61 < 0 {
							// set bts to contain just mnil (0xc0)
							bts = nbs.PushAlwaysNil(bts)
							nextMiss60zgensym_29db2bb3a798cb07_61 = 0
						}
						for nextMiss60zgensym_29db2bb3a798cb07_61 < maxFields60zgensym_29db2bb3a798cb07_61 && (found60zgensym_29db2bb3a798cb07_61[nextMiss60zgensym_29db2bb3a798cb07_61] || unmarshalMsgFieldSkip60zgensym_29db2bb3a798cb07_61[nextMiss60zgensym_29db2bb3a798cb07_61]) {
							nextMiss60zgensym_29db2bb3a798cb07_61++
						}
						if nextMiss60zgensym_29db2bb3a798cb07_61 == maxFields60zgensym_29db2bb3a798cb07_61 {
							// filled all the empty fields!
							break doneWithStruct60zgensym_29db2bb3a798cb07_61
						}
						missingFieldsLeft60zgensym_29db2bb3a798cb07_61--
						curField60zgensym_29db2bb3a798cb07_61 = unmarshalMsgFieldOrder60zgensym_29db2bb3a798cb07_61[nextMiss60zgensym_29db2bb3a798cb07_61]
					}
					//fmt.Printf("switching on curField: '%%v'\n", curField60zgensym_29db2bb3a798cb07_61)
					switch curField60zgensym_29db2bb3a798cb07_61 {
					// -- templateUnmarshalMsg ends here --

					case "ID__int":
						found60zgensym_29db2bb3a798cb07_61[0] = true
						z.MyPtr1.ID, bts, err = nbs.ReadIntBytes(bts)

						if err != nil {
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							return
						}
					}
				}
				if nextMiss60zgensym_29db2bb3a798cb07_61 != -1 {
					bts = nbs.PopAlwaysNil()
				}

			}
		case "MyIface0__rct":
			found56zgensym_29db2bb3a798cb07_57[2] = true
			var conc_zgensym_29db2bb3a798cb07_63 string
			conc_zgensym_29db2bb3a798cb07_63, bts = nbs.NextStructName(bts)
			if conc_zgensym_29db2bb3a798cb07_63 != "" {
				if cfac_zgensym_29db2bb3a798cb07_64, cfacOK_zgensym_29db2bb3a798cb07_64 := interface{}(z).(msgp.ConcreteFactory); cfacOK_zgensym_29db2bb3a798cb07_64 {
					targ_zgensym_29db2bb3a798cb07_62 := cfac_zgensym_29db2bb3a798cb07_64.NewValueAsInterface(-1, conc_zgensym_29db2bb3a798cb07_63).(Hello2)
					bts, err = targ_zgensym_29db2bb3a798cb07_62.UnmarshalMsg(bts)
					if err != nil {
						return
					}
					z.MyIface0 = targ_zgensym_29db2bb3a798cb07_62
					continue
				}
			}
			if len(bts) == 0 {
				continue
			}
			if msgp.IsNil(bts) {
				bts = bts[1:]
				continue
			}
			if z.MyIface0 == nil {
				bts, err = msgp.Skip(bts) // skip next object in stream.
			} else {
				bts, err = z.MyIface0.UnmarshalMsg(bts)
			}

			if err != nil {
				return
			}
		case "MyIface1__rct":
			found56zgensym_29db2bb3a798cb07_57[3] = true
			var conc_zgensym_29db2bb3a798cb07_66 string
			conc_zgensym_29db2bb3a798cb07_66, bts = nbs.NextStructName(bts)
			if conc_zgensym_29db2bb3a798cb07_66 != "" {
				if cfac_zgensym_29db2bb3a798cb07_67, cfacOK_zgensym_29db2bb3a798cb07_67 := interface{}(z).(msgp.ConcreteFactory); cfacOK_zgensym_29db2bb3a798cb07_67 {
					targ_zgensym_29db2bb3a798cb07_65 := cfac_zgensym_29db2bb3a798cb07_67.NewValueAsInterface(-1, conc_zgensym_29db2bb3a798cb07_66).(Hello2)
					bts, err = targ_zgensym_29db2bb3a798cb07_65.UnmarshalMsg(bts)
					if err != nil {
						return
					}
					z.MyIface1 = targ_zgensym_29db2bb3a798cb07_65
					continue
				}
			}
			if len(bts) == 0 {
				continue
			}
			if msgp.IsNil(bts) {
				bts = bts[1:]
				continue
			}
			if z.MyIface1 == nil {
				bts, err = msgp.Skip(bts) // skip next object in stream.
			} else {
				bts, err = z.MyIface1.UnmarshalMsg(bts)
			}

			if err != nil {
				return
			}
		case "Slice__slc":
			found56zgensym_29db2bb3a798cb07_57[4] = true
			if nbs.AlwaysNil {
				(z.Slice) = (z.Slice)[:0]
			} else {

				var zgensym_29db2bb3a798cb07_68 uint32
				zgensym_29db2bb3a798cb07_68, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Slice) >= int(zgensym_29db2bb3a798cb07_68) {
					z.Slice = (z.Slice)[:zgensym_29db2bb3a798cb07_68]
				} else {
					z.Slice = make([]Hello2, zgensym_29db2bb3a798cb07_68)
				}
				// NB: we have a slice of interfaces, so we need to
				//  fill target with the concrete implementation
				for zgensym_29db2bb3a798cb07_27 := range z.Slice {

					var concreteName_zgensym_29db2bb3a798cb07_70 string
					concreteName_zgensym_29db2bb3a798cb07_70, bts = nbs.NextStructName(bts)
					target_zgensym_29db2bb3a798cb07_69 := z.Slice[zgensym_29db2bb3a798cb07_27]
					if concreteName_zgensym_29db2bb3a798cb07_70 != "" {
						if cfac_zgensym_29db2bb3a798cb07_71, cfac_zgensym_29db2bb3a798cb07_71_OK := interface{}(z).(msgp.ConcreteFactory); cfac_zgensym_29db2bb3a798cb07_71_OK {
							target_zgensym_29db2bb3a798cb07_69 = cfac_zgensym_29db2bb3a798cb07_71.NewValueAsInterface(-1, concreteName_zgensym_29db2bb3a798cb07_70).(Hello2)
						}
						bts, err = target_zgensym_29db2bb3a798cb07_69.UnmarshalMsg(bts)
						if err != nil {
							return
						}

						z.Slice[zgensym_29db2bb3a798cb07_27] = target_zgensym_29db2bb3a798cb07_69
						continue
					}

					bts, err = z.Slice[zgensym_29db2bb3a798cb07_27].UnmarshalMsg(bts) // from unmarshalRangeBlock in spec.go:486. IsInInterfaceSlice: true
					if err != nil {
						return
					}
				}
			}
		case "SlicePtr__slc":
			found56zgensym_29db2bb3a798cb07_57[5] = true
			if nbs.AlwaysNil {
				(z.SlicePtr) = (z.SlicePtr)[:0]
			} else {

				var zgensym_29db2bb3a798cb07_72 uint32
				zgensym_29db2bb3a798cb07_72, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.SlicePtr) >= int(zgensym_29db2bb3a798cb07_72) {
					z.SlicePtr = (z.SlicePtr)[:zgensym_29db2bb3a798cb07_72]
				} else {
					z.SlicePtr = make([]*Greeter2, zgensym_29db2bb3a798cb07_72)
				}
				for zgensym_29db2bb3a798cb07_28 := range z.SlicePtr {
					// default gPtr logic.
					if nbs.PeekNil(bts) && z.SlicePtr[zgensym_29db2bb3a798cb07_28] == nil {
						// consume the nil
						bts, err = nbs.ReadNilBytes(bts)
						if err != nil {
							return
						}
					} else {
						// read as-if the wire has bytes, letting nbs take care of nils.

						if z.SlicePtr[zgensym_29db2bb3a798cb07_28] == nil {
							z.SlicePtr[zgensym_29db2bb3a798cb07_28] = new(Greeter2)
						}

						const maxFields73zgensym_29db2bb3a798cb07_74 = 1

						// -- templateUnmarshalMsg starts here--
						var totalEncodedFields73zgensym_29db2bb3a798cb07_74 uint32
						if !nbs.AlwaysNil {
							totalEncodedFields73zgensym_29db2bb3a798cb07_74, bts, err = nbs.ReadMapHeaderBytes(bts)
							if err != nil {
								return
							}
						}
						encodedFieldsLeft73zgensym_29db2bb3a798cb07_74 := totalEncodedFields73zgensym_29db2bb3a798cb07_74
						missingFieldsLeft73zgensym_29db2bb3a798cb07_74 := maxFields73zgensym_29db2bb3a798cb07_74 - totalEncodedFields73zgensym_29db2bb3a798cb07_74

						var nextMiss73zgensym_29db2bb3a798cb07_74 int32 = -1
						var found73zgensym_29db2bb3a798cb07_74 [maxFields73zgensym_29db2bb3a798cb07_74]bool
						var curField73zgensym_29db2bb3a798cb07_74 string

					doneWithStruct73zgensym_29db2bb3a798cb07_74:
						// First fill all the encoded fields, then
						// treat the remaining, missing fields, as Nil.
						for encodedFieldsLeft73zgensym_29db2bb3a798cb07_74 > 0 || missingFieldsLeft73zgensym_29db2bb3a798cb07_74 > 0 {
							//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft73zgensym_29db2bb3a798cb07_74, missingFieldsLeft73zgensym_29db2bb3a798cb07_74, msgp.ShowFound(found73zgensym_29db2bb3a798cb07_74[:]), unmarshalMsgFieldOrder73zgensym_29db2bb3a798cb07_74)
							if encodedFieldsLeft73zgensym_29db2bb3a798cb07_74 > 0 {
								encodedFieldsLeft73zgensym_29db2bb3a798cb07_74--
								field, bts, err = nbs.ReadMapKeyZC(bts)
								if err != nil {
									return
								}
								curField73zgensym_29db2bb3a798cb07_74 = msgp.UnsafeString(field)
							} else {
								//missing fields need handling
								if nextMiss73zgensym_29db2bb3a798cb07_74 < 0 {
									// set bts to contain just mnil (0xc0)
									bts = nbs.PushAlwaysNil(bts)
									nextMiss73zgensym_29db2bb3a798cb07_74 = 0
								}
								for nextMiss73zgensym_29db2bb3a798cb07_74 < maxFields73zgensym_29db2bb3a798cb07_74 && (found73zgensym_29db2bb3a798cb07_74[nextMiss73zgensym_29db2bb3a798cb07_74] || unmarshalMsgFieldSkip73zgensym_29db2bb3a798cb07_74[nextMiss73zgensym_29db2bb3a798cb07_74]) {
									nextMiss73zgensym_29db2bb3a798cb07_74++
								}
								if nextMiss73zgensym_29db2bb3a798cb07_74 == maxFields73zgensym_29db2bb3a798cb07_74 {
									// filled all the empty fields!
									break doneWithStruct73zgensym_29db2bb3a798cb07_74
								}
								missingFieldsLeft73zgensym_29db2bb3a798cb07_74--
								curField73zgensym_29db2bb3a798cb07_74 = unmarshalMsgFieldOrder73zgensym_29db2bb3a798cb07_74[nextMiss73zgensym_29db2bb3a798cb07_74]
							}
							//fmt.Printf("switching on curField: '%%v'\n", curField73zgensym_29db2bb3a798cb07_74)
							switch curField73zgensym_29db2bb3a798cb07_74 {
							// -- templateUnmarshalMsg ends here --

							case "Style__int":
								found73zgensym_29db2bb3a798cb07_74[0] = true
								z.SlicePtr[zgensym_29db2bb3a798cb07_28].Style, bts, err = nbs.ReadIntBytes(bts)

								if err != nil {
									return
								}
							default:
								bts, err = msgp.Skip(bts)
								if err != nil {
									return
								}
							}
						}
						if nextMiss73zgensym_29db2bb3a798cb07_74 != -1 {
							bts = nbs.PopAlwaysNil()
						}

					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss56zgensym_29db2bb3a798cb07_57 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of NoDedup
var unmarshalMsgFieldOrder56zgensym_29db2bb3a798cb07_57 = []string{"MyPtr0__ptr", "MyPtr1__ptr", "MyIface0__rct", "MyIface1__rct", "Slice__slc", "SlicePtr__slc"}

var unmarshalMsgFieldSkip56zgensym_29db2bb3a798cb07_57 = []bool{false, false, false, false, false, false}

// fields of Target2
var unmarshalMsgFieldOrder58zgensym_29db2bb3a798cb07_59 = []string{"ID__int"}

var unmarshalMsgFieldSkip58zgensym_29db2bb3a798cb07_59 = []bool{false}

// fields of Target2
var unmarshalMsgFieldOrder60zgensym_29db2bb3a798cb07_61 = []string{"ID__int"}

var unmarshalMsgFieldSkip60zgensym_29db2bb3a798cb07_61 = []bool{false}

// fields of Greeter2
var unmarshalMsgFieldOrder73zgensym_29db2bb3a798cb07_74 = []string{"Style__int"}

var unmarshalMsgFieldSkip73zgensym_29db2bb3a798cb07_74 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *NoDedup) Msgsize() (s int) {
	s = 1 + 12
	if z.MyPtr0 == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8 + msgp.IntSize
	}
	s += 12
	if z.MyPtr1 == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8 + msgp.IntSize
	}
	s += 14 + msgp.GuessSize(z.MyIface0) + 14 + msgp.GuessSize(z.MyIface1) + 11 + msgp.ArrayHeaderSize
	for zgensym_29db2bb3a798cb07_27 := range z.Slice {
		s += msgp.GuessSize(z.Slice[zgensym_29db2bb3a798cb07_27])
	}
	s += 14 + msgp.ArrayHeaderSize
	for zgensym_29db2bb3a798cb07_28 := range z.SlicePtr {
		if z.SlicePtr[zgensym_29db2bb3a798cb07_28] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 11 + msgp.IntSize
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Outer2) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields76zgensym_29db2bb3a798cb07_77 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields76zgensym_29db2bb3a798cb07_77 uint32
	totalEncodedFields76zgensym_29db2bb3a798cb07_77, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft76zgensym_29db2bb3a798cb07_77 := totalEncodedFields76zgensym_29db2bb3a798cb07_77
	missingFieldsLeft76zgensym_29db2bb3a798cb07_77 := maxFields76zgensym_29db2bb3a798cb07_77 - totalEncodedFields76zgensym_29db2bb3a798cb07_77

	var nextMiss76zgensym_29db2bb3a798cb07_77 int32 = -1
	var found76zgensym_29db2bb3a798cb07_77 [maxFields76zgensym_29db2bb3a798cb07_77]bool
	var curField76zgensym_29db2bb3a798cb07_77 string

doneWithStruct76zgensym_29db2bb3a798cb07_77:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft76zgensym_29db2bb3a798cb07_77 > 0 || missingFieldsLeft76zgensym_29db2bb3a798cb07_77 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft76zgensym_29db2bb3a798cb07_77, missingFieldsLeft76zgensym_29db2bb3a798cb07_77, msgp.ShowFound(found76zgensym_29db2bb3a798cb07_77[:]), decodeMsgFieldOrder76zgensym_29db2bb3a798cb07_77)
		if encodedFieldsLeft76zgensym_29db2bb3a798cb07_77 > 0 {
			encodedFieldsLeft76zgensym_29db2bb3a798cb07_77--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField76zgensym_29db2bb3a798cb07_77 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss76zgensym_29db2bb3a798cb07_77 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss76zgensym_29db2bb3a798cb07_77 = 0
			}
			for nextMiss76zgensym_29db2bb3a798cb07_77 < maxFields76zgensym_29db2bb3a798cb07_77 && (found76zgensym_29db2bb3a798cb07_77[nextMiss76zgensym_29db2bb3a798cb07_77] || decodeMsgFieldSkip76zgensym_29db2bb3a798cb07_77[nextMiss76zgensym_29db2bb3a798cb07_77]) {
				nextMiss76zgensym_29db2bb3a798cb07_77++
			}
			if nextMiss76zgensym_29db2bb3a798cb07_77 == maxFields76zgensym_29db2bb3a798cb07_77 {
				// filled all the empty fields!
				break doneWithStruct76zgensym_29db2bb3a798cb07_77
			}
			missingFieldsLeft76zgensym_29db2bb3a798cb07_77--
			curField76zgensym_29db2bb3a798cb07_77 = decodeMsgFieldOrder76zgensym_29db2bb3a798cb07_77[nextMiss76zgensym_29db2bb3a798cb07_77]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField76zgensym_29db2bb3a798cb07_77)
		switch curField76zgensym_29db2bb3a798cb07_77 {
		// -- templateDecodeMsg ends here --

		case "slc_zid00_slc":
			found76zgensym_29db2bb3a798cb07_77[0] = true
			var zgensym_29db2bb3a798cb07_78 uint32
			zgensym_29db2bb3a798cb07_78, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Slc) >= int(zgensym_29db2bb3a798cb07_78) {
				z.Slc = (z.Slc)[:zgensym_29db2bb3a798cb07_78]
			} else {
				z.Slc = make([]Imid2, zgensym_29db2bb3a798cb07_78)
			}
			// NB: we have a slice of interfaces, so we need to
			//  fill target with the concrete implementation
			for zgensym_29db2bb3a798cb07_75 := range z.Slc {

				concreteName_zgensym_29db2bb3a798cb07_80 := dc.NextStructName()
				target_zgensym_29db2bb3a798cb07_79 := z.Slc[zgensym_29db2bb3a798cb07_75]
				if concreteName_zgensym_29db2bb3a798cb07_80 != "" {
					if cfac_zgensym_29db2bb3a798cb07_81, cfac_zgensym_29db2bb3a798cb07_81_OK := interface{}(z).(msgp.ConcreteFactory); cfac_zgensym_29db2bb3a798cb07_81_OK {
						target_zgensym_29db2bb3a798cb07_79 = cfac_zgensym_29db2bb3a798cb07_81.NewValueAsInterface(0, concreteName_zgensym_29db2bb3a798cb07_80).(Imid2)
					}

					err = target_zgensym_29db2bb3a798cb07_79.DecodeMsg(dc)
					if err != nil {
						return
					}

					z.Slc[zgensym_29db2bb3a798cb07_75] = target_zgensym_29db2bb3a798cb07_79
					continue
				}

				err = z.Slc[zgensym_29db2bb3a798cb07_75].DecodeMsg(dc) // from decodeRangeBlock in spec.go:511. IsInInterfaceSlice: true
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss76zgensym_29db2bb3a798cb07_77 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Outer2
var decodeMsgFieldOrder76zgensym_29db2bb3a798cb07_77 = []string{"slc_zid00_slc"}

var decodeMsgFieldSkip76zgensym_29db2bb3a798cb07_77 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *Outer2) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (len(z.Slc) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Outer2) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_29db2bb3a798cb07_82 [1]bool
	fieldsInUse_zgensym_29db2bb3a798cb07_83 := z.fieldsNotEmpty(empty_zgensym_29db2bb3a798cb07_82[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_29db2bb3a798cb07_83 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Outer2'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4f, 0x75, 0x74, 0x65, 0x72, 0x32})
	if err != nil {
		return err
	}

	if !empty_zgensym_29db2bb3a798cb07_82[0] {
		// write "slc_zid00_slc"
		err = en.Append(0xad, 0x73, 0x6c, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Slc)))
		if err != nil {
			return
		}
		for zgensym_29db2bb3a798cb07_75 := range z.Slc {
			err = en.WriteIntf(z.Slc[zgensym_29db2bb3a798cb07_75])
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Outer2) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "slc_zid00_slc"
		o = append(o, 0xad, 0x73, 0x6c, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Slc)))
		for zgensym_29db2bb3a798cb07_75 := range z.Slc {
			o, err = msgp.AppendIntf(o, z.Slc[zgensym_29db2bb3a798cb07_75]) // is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Outer2) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Outer2) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields84zgensym_29db2bb3a798cb07_85 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields84zgensym_29db2bb3a798cb07_85 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields84zgensym_29db2bb3a798cb07_85, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft84zgensym_29db2bb3a798cb07_85 := totalEncodedFields84zgensym_29db2bb3a798cb07_85
	missingFieldsLeft84zgensym_29db2bb3a798cb07_85 := maxFields84zgensym_29db2bb3a798cb07_85 - totalEncodedFields84zgensym_29db2bb3a798cb07_85

	var nextMiss84zgensym_29db2bb3a798cb07_85 int32 = -1
	var found84zgensym_29db2bb3a798cb07_85 [maxFields84zgensym_29db2bb3a798cb07_85]bool
	var curField84zgensym_29db2bb3a798cb07_85 string

doneWithStruct84zgensym_29db2bb3a798cb07_85:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft84zgensym_29db2bb3a798cb07_85 > 0 || missingFieldsLeft84zgensym_29db2bb3a798cb07_85 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft84zgensym_29db2bb3a798cb07_85, missingFieldsLeft84zgensym_29db2bb3a798cb07_85, msgp.ShowFound(found84zgensym_29db2bb3a798cb07_85[:]), unmarshalMsgFieldOrder84zgensym_29db2bb3a798cb07_85)
		if encodedFieldsLeft84zgensym_29db2bb3a798cb07_85 > 0 {
			encodedFieldsLeft84zgensym_29db2bb3a798cb07_85--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField84zgensym_29db2bb3a798cb07_85 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss84zgensym_29db2bb3a798cb07_85 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss84zgensym_29db2bb3a798cb07_85 = 0
			}
			for nextMiss84zgensym_29db2bb3a798cb07_85 < maxFields84zgensym_29db2bb3a798cb07_85 && (found84zgensym_29db2bb3a798cb07_85[nextMiss84zgensym_29db2bb3a798cb07_85] || unmarshalMsgFieldSkip84zgensym_29db2bb3a798cb07_85[nextMiss84zgensym_29db2bb3a798cb07_85]) {
				nextMiss84zgensym_29db2bb3a798cb07_85++
			}
			if nextMiss84zgensym_29db2bb3a798cb07_85 == maxFields84zgensym_29db2bb3a798cb07_85 {
				// filled all the empty fields!
				break doneWithStruct84zgensym_29db2bb3a798cb07_85
			}
			missingFieldsLeft84zgensym_29db2bb3a798cb07_85--
			curField84zgensym_29db2bb3a798cb07_85 = unmarshalMsgFieldOrder84zgensym_29db2bb3a798cb07_85[nextMiss84zgensym_29db2bb3a798cb07_85]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField84zgensym_29db2bb3a798cb07_85)
		switch curField84zgensym_29db2bb3a798cb07_85 {
		// -- templateUnmarshalMsg ends here --

		case "slc_zid00_slc":
			found84zgensym_29db2bb3a798cb07_85[0] = true
			if nbs.AlwaysNil {
				(z.Slc) = (z.Slc)[:0]
			} else {

				var zgensym_29db2bb3a798cb07_86 uint32
				zgensym_29db2bb3a798cb07_86, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Slc) >= int(zgensym_29db2bb3a798cb07_86) {
					z.Slc = (z.Slc)[:zgensym_29db2bb3a798cb07_86]
				} else {
					z.Slc = make([]Imid2, zgensym_29db2bb3a798cb07_86)
				}
				// NB: we have a slice of interfaces, so we need to
				//  fill target with the concrete implementation
				for zgensym_29db2bb3a798cb07_75 := range z.Slc {

					var concreteName_zgensym_29db2bb3a798cb07_88 string
					concreteName_zgensym_29db2bb3a798cb07_88, bts = nbs.NextStructName(bts)
					target_zgensym_29db2bb3a798cb07_87 := z.Slc[zgensym_29db2bb3a798cb07_75]
					if concreteName_zgensym_29db2bb3a798cb07_88 != "" {
						if cfac_zgensym_29db2bb3a798cb07_89, cfac_zgensym_29db2bb3a798cb07_89_OK := interface{}(z).(msgp.ConcreteFactory); cfac_zgensym_29db2bb3a798cb07_89_OK {
							target_zgensym_29db2bb3a798cb07_87 = cfac_zgensym_29db2bb3a798cb07_89.NewValueAsInterface(0, concreteName_zgensym_29db2bb3a798cb07_88).(Imid2)
						}
						bts, err = target_zgensym_29db2bb3a798cb07_87.UnmarshalMsg(bts)
						if err != nil {
							return
						}

						z.Slc[zgensym_29db2bb3a798cb07_75] = target_zgensym_29db2bb3a798cb07_87
						continue
					}

					bts, err = z.Slc[zgensym_29db2bb3a798cb07_75].UnmarshalMsg(bts) // from unmarshalRangeBlock in spec.go:486. IsInInterfaceSlice: true
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss84zgensym_29db2bb3a798cb07_85 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Outer2
var unmarshalMsgFieldOrder84zgensym_29db2bb3a798cb07_85 = []string{"slc_zid00_slc"}

var unmarshalMsgFieldSkip84zgensym_29db2bb3a798cb07_85 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Outer2) Msgsize() (s int) {
	s = 1 + 14 + msgp.ArrayHeaderSize
	for zgensym_29db2bb3a798cb07_75 := range z.Slc {
		s += msgp.GuessSize(z.Slc[zgensym_29db2bb3a798cb07_75])
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Target2) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields90zgensym_29db2bb3a798cb07_91 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields90zgensym_29db2bb3a798cb07_91 uint32
	totalEncodedFields90zgensym_29db2bb3a798cb07_91, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft90zgensym_29db2bb3a798cb07_91 := totalEncodedFields90zgensym_29db2bb3a798cb07_91
	missingFieldsLeft90zgensym_29db2bb3a798cb07_91 := maxFields90zgensym_29db2bb3a798cb07_91 - totalEncodedFields90zgensym_29db2bb3a798cb07_91

	var nextMiss90zgensym_29db2bb3a798cb07_91 int32 = -1
	var found90zgensym_29db2bb3a798cb07_91 [maxFields90zgensym_29db2bb3a798cb07_91]bool
	var curField90zgensym_29db2bb3a798cb07_91 string

doneWithStruct90zgensym_29db2bb3a798cb07_91:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft90zgensym_29db2bb3a798cb07_91 > 0 || missingFieldsLeft90zgensym_29db2bb3a798cb07_91 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft90zgensym_29db2bb3a798cb07_91, missingFieldsLeft90zgensym_29db2bb3a798cb07_91, msgp.ShowFound(found90zgensym_29db2bb3a798cb07_91[:]), decodeMsgFieldOrder90zgensym_29db2bb3a798cb07_91)
		if encodedFieldsLeft90zgensym_29db2bb3a798cb07_91 > 0 {
			encodedFieldsLeft90zgensym_29db2bb3a798cb07_91--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField90zgensym_29db2bb3a798cb07_91 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss90zgensym_29db2bb3a798cb07_91 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss90zgensym_29db2bb3a798cb07_91 = 0
			}
			for nextMiss90zgensym_29db2bb3a798cb07_91 < maxFields90zgensym_29db2bb3a798cb07_91 && (found90zgensym_29db2bb3a798cb07_91[nextMiss90zgensym_29db2bb3a798cb07_91] || decodeMsgFieldSkip90zgensym_29db2bb3a798cb07_91[nextMiss90zgensym_29db2bb3a798cb07_91]) {
				nextMiss90zgensym_29db2bb3a798cb07_91++
			}
			if nextMiss90zgensym_29db2bb3a798cb07_91 == maxFields90zgensym_29db2bb3a798cb07_91 {
				// filled all the empty fields!
				break doneWithStruct90zgensym_29db2bb3a798cb07_91
			}
			missingFieldsLeft90zgensym_29db2bb3a798cb07_91--
			curField90zgensym_29db2bb3a798cb07_91 = decodeMsgFieldOrder90zgensym_29db2bb3a798cb07_91[nextMiss90zgensym_29db2bb3a798cb07_91]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField90zgensym_29db2bb3a798cb07_91)
		switch curField90zgensym_29db2bb3a798cb07_91 {
		// -- templateDecodeMsg ends here --

		case "ID__int":
			found90zgensym_29db2bb3a798cb07_91[0] = true
			z.ID, err = dc.ReadInt()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss90zgensym_29db2bb3a798cb07_91 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Target2
var decodeMsgFieldOrder90zgensym_29db2bb3a798cb07_91 = []string{"ID__int"}

var decodeMsgFieldSkip90zgensym_29db2bb3a798cb07_91 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *Target2) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (z.ID == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Target2) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_29db2bb3a798cb07_92 [1]bool
	fieldsInUse_zgensym_29db2bb3a798cb07_93 := z.fieldsNotEmpty(empty_zgensym_29db2bb3a798cb07_92[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_29db2bb3a798cb07_93 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Target2'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x32})
	if err != nil {
		return err
	}

	if !empty_zgensym_29db2bb3a798cb07_92[0] {
		// write "ID__int"
		err = en.Append(0xa7, 0x49, 0x44, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.ID)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Target2) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "ID__int"
		o = append(o, 0xa7, 0x49, 0x44, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.ID)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Target2) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Target2) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields94zgensym_29db2bb3a798cb07_95 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields94zgensym_29db2bb3a798cb07_95 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields94zgensym_29db2bb3a798cb07_95, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft94zgensym_29db2bb3a798cb07_95 := totalEncodedFields94zgensym_29db2bb3a798cb07_95
	missingFieldsLeft94zgensym_29db2bb3a798cb07_95 := maxFields94zgensym_29db2bb3a798cb07_95 - totalEncodedFields94zgensym_29db2bb3a798cb07_95

	var nextMiss94zgensym_29db2bb3a798cb07_95 int32 = -1
	var found94zgensym_29db2bb3a798cb07_95 [maxFields94zgensym_29db2bb3a798cb07_95]bool
	var curField94zgensym_29db2bb3a798cb07_95 string

doneWithStruct94zgensym_29db2bb3a798cb07_95:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft94zgensym_29db2bb3a798cb07_95 > 0 || missingFieldsLeft94zgensym_29db2bb3a798cb07_95 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft94zgensym_29db2bb3a798cb07_95, missingFieldsLeft94zgensym_29db2bb3a798cb07_95, msgp.ShowFound(found94zgensym_29db2bb3a798cb07_95[:]), unmarshalMsgFieldOrder94zgensym_29db2bb3a798cb07_95)
		if encodedFieldsLeft94zgensym_29db2bb3a798cb07_95 > 0 {
			encodedFieldsLeft94zgensym_29db2bb3a798cb07_95--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField94zgensym_29db2bb3a798cb07_95 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss94zgensym_29db2bb3a798cb07_95 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss94zgensym_29db2bb3a798cb07_95 = 0
			}
			for nextMiss94zgensym_29db2bb3a798cb07_95 < maxFields94zgensym_29db2bb3a798cb07_95 && (found94zgensym_29db2bb3a798cb07_95[nextMiss94zgensym_29db2bb3a798cb07_95] || unmarshalMsgFieldSkip94zgensym_29db2bb3a798cb07_95[nextMiss94zgensym_29db2bb3a798cb07_95]) {
				nextMiss94zgensym_29db2bb3a798cb07_95++
			}
			if nextMiss94zgensym_29db2bb3a798cb07_95 == maxFields94zgensym_29db2bb3a798cb07_95 {
				// filled all the empty fields!
				break doneWithStruct94zgensym_29db2bb3a798cb07_95
			}
			missingFieldsLeft94zgensym_29db2bb3a798cb07_95--
			curField94zgensym_29db2bb3a798cb07_95 = unmarshalMsgFieldOrder94zgensym_29db2bb3a798cb07_95[nextMiss94zgensym_29db2bb3a798cb07_95]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField94zgensym_29db2bb3a798cb07_95)
		switch curField94zgensym_29db2bb3a798cb07_95 {
		// -- templateUnmarshalMsg ends here --

		case "ID__int":
			found94zgensym_29db2bb3a798cb07_95[0] = true
			z.ID, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss94zgensym_29db2bb3a798cb07_95 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Target2
var unmarshalMsgFieldOrder94zgensym_29db2bb3a798cb07_95 = []string{"ID__int"}

var unmarshalMsgFieldSkip94zgensym_29db2bb3a798cb07_95 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Target2) Msgsize() (s int) {
	s = 1 + 8 + msgp.IntSize
	return
}
